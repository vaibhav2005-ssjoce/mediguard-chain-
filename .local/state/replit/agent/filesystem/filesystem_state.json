{"file_contents":{"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/pages/patient-blockchain.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Shield, Clock } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Badge } from '@/components/ui/badge';\nimport { format } from 'date-fns';\n\nexport default function PatientBlockchain() {\n  const { data: transactions, isLoading } = useQuery({\n    queryKey: ['/api/blockchain/transactions'],\n  });\n\n  const getActionColor = (action: string) => {\n    if (action.includes('grant')) return 'bg-chart-2/10 text-chart-2';\n    if (action.includes('revoke')) return 'bg-destructive/10 text-destructive';\n    if (action.includes('upload')) return 'bg-primary/10 text-primary';\n    return 'bg-muted/50 text-foreground';\n  };\n\n  return (\n    <DashboardLayout role=\"patient\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">Blockchain Transaction Log</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Immutable record of all your healthcare data activities\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(5)].map((_, i) => (\n              <Skeleton key={i} className=\"h-24\" />\n            ))}\n          </div>\n        ) : transactions && transactions.length > 0 ? (\n          <div className=\"space-y-4\">\n            {transactions.map((tx: any) => (\n              <Card key={tx.id} data-testid={`tx-${tx.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-3\">\n                      <Shield className=\"h-5 w-5 text-primary\" />\n                      <div>\n                        <CardTitle className=\"text-base capitalize\">\n                          {tx.actionType.replace(/_/g, ' ')}\n                        </CardTitle>\n                        <CardDescription className=\"capitalize\">\n                          {tx.resourceType.replace(/_/g, ' ')}\n                        </CardDescription>\n                      </div>\n                    </div>\n                    <Badge className={getActionColor(tx.actionType)} variant=\"secondary\">\n                      Verified\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"grid gap-3 text-sm\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">Transaction Hash:</span>\n                      <code className=\"rounded bg-muted px-2 py-1 font-mono text-xs\">\n                        {tx.transactionHash.slice(0, 16)}...{tx.transactionHash.slice(-8)}\n                      </code>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">Previous Hash:</span>\n                      <code className=\"rounded bg-muted px-2 py-1 font-mono text-xs\">\n                        {tx.previousHash === 'genesis' ? 'Genesis' : `${tx.previousHash.slice(0, 16)}...`}\n                      </code>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">Timestamp:</span>\n                      <span className=\"flex items-center gap-1\">\n                        <Clock className=\"h-3 w-3\" />\n                        {format(new Date(tx.timestamp), 'MMM d, yyyy h:mm a')}\n                      </span>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <Shield className=\"h-16 w-16 text-muted-foreground/50\" />\n              <h3 className=\"mt-4 font-serif text-xl font-semibold\">No transactions yet</h3>\n              <p className=\"mt-2 text-sm text-muted-foreground\">\n                Your blockchain activity will appear here\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":4389},"client/src/lib/auth-context.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from 'react';\nimport { User } from '@shared/schema';\n\ninterface AuthContextType {\n  user: User | null;\n  token: string | null;\n  login: (user: User, token: string) => void;\n  logout: () => void;\n  isAuthenticated: boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [token, setToken] = useState<string | null>(null);\n\n  useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    const storedToken = localStorage.getItem('token');\n    \n    if (storedUser && storedToken) {\n      setUser(JSON.parse(storedUser));\n      setToken(storedToken);\n    }\n  }, []);\n\n  const login = (newUser: User, newToken: string) => {\n    setUser(newUser);\n    setToken(newToken);\n    localStorage.setItem('user', JSON.stringify(newUser));\n    localStorage.setItem('token', newToken);\n  };\n\n  const logout = () => {\n    setUser(null);\n    setToken(null);\n    localStorage.removeItem('user');\n    localStorage.removeItem('token');\n  };\n\n  return (\n    <AuthContext.Provider value={{ user, token, login, logout, isAuthenticated: !!user }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n}\n","size_bytes":1516},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/pages/patient-insights.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Activity, AlertCircle, Info } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Badge } from '@/components/ui/badge';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { format } from 'date-fns';\n\nexport default function PatientInsights() {\n  const { data: insights, isLoading } = useQuery({\n    queryKey: ['/api/health-insights'],\n  });\n\n  const getSeverityColor = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n      case 'high':\n        return 'destructive';\n      case 'medium':\n        return 'default';\n      case 'low':\n        return 'secondary';\n      default:\n        return 'outline';\n    }\n  };\n\n  const getSeverityIcon = (severity: string) => {\n    switch (severity) {\n      case 'critical':\n      case 'high':\n        return <AlertCircle className=\"h-5 w-5\" />;\n      case 'medium':\n      case 'low':\n        return <Info className=\"h-5 w-5\" />;\n      default:\n        return <Activity className=\"h-5 w-5\" />;\n    }\n  };\n\n  return (\n    <DashboardLayout role=\"patient\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">Health Insights</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            AI-powered analysis and recommendations based on your health data\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"space-y-4\">\n            {[...Array(4)].map((_, i) => (\n              <Skeleton key={i} className=\"h-32\" />\n            ))}\n          </div>\n        ) : insights && insights.length > 0 ? (\n          <div className=\"space-y-4\">\n            {insights.map((insight: any) => (\n              <Alert key={insight.id} variant={getSeverityColor(insight.severity)} data-testid={`insight-${insight.id}`}>\n                <div className=\"flex items-start gap-3\">\n                  <div className=\"flex-shrink-0 mt-0.5\">\n                    {getSeverityIcon(insight.severity)}\n                  </div>\n                  <div className=\"flex-1 space-y-2\">\n                    <div className=\"flex items-start justify-between gap-2\">\n                      <AlertTitle className=\"mb-0\">{insight.title}</AlertTitle>\n                      <div className=\"flex items-center gap-2\">\n                        <Badge variant=\"outline\" className=\"capitalize whitespace-nowrap\">\n                          {insight.severity}\n                        </Badge>\n                        {!insight.isRead && (\n                          <Badge variant=\"default\" className=\"bg-primary\">New</Badge>\n                        )}\n                      </div>\n                    </div>\n                    <AlertDescription className=\"text-sm\">\n                      {insight.description}\n                    </AlertDescription>\n                    {insight.recommendations && (\n                      <div className=\"mt-3 rounded-md bg-background/50 p-3\">\n                        <p className=\"text-sm font-medium\">Recommendations:</p>\n                        <p className=\"mt-1 text-sm text-muted-foreground\">\n                          {insight.recommendations}\n                        </p>\n                      </div>\n                    )}\n                    <p className=\"text-xs text-muted-foreground\">\n                      {format(new Date(insight.createdAt), 'MMM d, yyyy h:mm a')}\n                    </p>\n                  </div>\n                </div>\n              </Alert>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <Activity className=\"h-16 w-16 text-muted-foreground/50\" />\n              <h3 className=\"mt-4 font-serif text-xl font-semibold\">No health insights yet</h3>\n              <p className=\"mt-2 text-center text-sm text-muted-foreground\">\n                Upload medical records with health metrics (blood pressure, glucose, etc.) <br />\n                to receive personalized AI-powered health insights\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":4362},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/pages/insurance-claims.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { FileText, Clock, CheckCircle, XCircle, DollarSign } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Badge } from '@/components/ui/badge';\nimport { format } from 'date-fns';\n\nexport default function InsuranceClaims() {\n  const { data: claims, isLoading } = useQuery({\n    queryKey: ['/api/claims'],\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'submitted':\n        return <Badge variant=\"secondary\"><Clock className=\"mr-1 h-3 w-3\" />Submitted</Badge>;\n      case 'under_review':\n        return <Badge variant=\"default\"><FileText className=\"mr-1 h-3 w-3\" />Under Review</Badge>;\n      case 'approved':\n        return <Badge variant=\"default\" className=\"bg-chart-2\"><CheckCircle className=\"mr-1 h-3 w-3\" />Approved</Badge>;\n      case 'paid':\n        return <Badge variant=\"default\" className=\"bg-chart-2\"><DollarSign className=\"mr-1 h-3 w-3\" />Paid</Badge>;\n      case 'rejected':\n        return <Badge variant=\"destructive\"><XCircle className=\"mr-1 h-3 w-3\" />Rejected</Badge>;\n      default:\n        return <Badge variant=\"outline\">{status}</Badge>;\n    }\n  };\n\n  return (\n    <DashboardLayout role=\"insurance\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">My Claims</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Track your insurance claims with blockchain transparency\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {[...Array(4)].map((_, i) => (\n              <Skeleton key={i} className=\"h-48\" />\n            ))}\n          </div>\n        ) : claims && claims.length > 0 ? (\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {claims.map((claim: any) => (\n              <Card key={claim.id} data-testid={`claim-${claim.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-base\">Claim #{claim.id.slice(0, 8)}</CardTitle>\n                      <CardDescription className=\"capitalize\">\n                        {claim.claimType.replace('_', ' ')}\n                      </CardDescription>\n                    </div>\n                    {getStatusBadge(claim.status)}\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Policy Provider</p>\n                    <p className=\"font-medium\">{claim.policyProvider}</p>\n                  </div>\n\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Claim Amount</p>\n                    <p className=\"text-lg font-semibold\">${claim.claimAmount.toLocaleString()}</p>\n                  </div>\n\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Description</p>\n                    <p className=\"text-sm line-clamp-2\">{claim.description}</p>\n                  </div>\n\n                  {claim.reviewNotes && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Review Notes</p>\n                      <p className=\"text-sm\">{claim.reviewNotes}</p>\n                    </div>\n                  )}\n\n                  <div className=\"pt-2 text-xs text-muted-foreground\">\n                    Submitted {format(new Date(claim.submittedAt), 'MMM d, yyyy')}\n                  </div>\n\n                  <div className=\"pt-2\">\n                    <p className=\"text-xs text-muted-foreground\">Blockchain Hash:</p>\n                    <code className=\"text-xs font-mono\">{claim.blockchainHash.slice(0, 20)}...</code>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <FileText className=\"h-16 w-16 text-muted-foreground/50\" />\n              <h3 className=\"mt-4 font-serif text-xl font-semibold\">No claims submitted yet</h3>\n              <p className=\"mt-2 text-sm text-muted-foreground\">\n                Submit your first insurance claim to get started\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":4645},"client/src/pages/login.tsx":{"content":"import { useState } from 'react';\nimport { useLocation } from 'wouter';\nimport { useMutation } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Shield, Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/lib/auth-context';\nimport { apiRequest } from '@/lib/queryClient';\nimport { ThemeToggle } from '@/components/theme-toggle';\n\nconst loginSchema = z.object({\n  username: z.string().min(3, 'Username must be at least 3 characters'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n});\n\ntype LoginForm = z.infer<typeof loginSchema>;\n\nexport default function Login() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<LoginForm>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      username: '',\n      password: '',\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginForm) => {\n      return await apiRequest('POST', '/api/auth/login', data);\n    },\n    onSuccess: (response: any) => {\n      login(response.user, response.token);\n      toast({\n        title: 'Welcome back!',\n        description: 'You have successfully logged in.',\n      });\n      \n      // Redirect based on role\n      const roleRoutes: Record<string, string> = {\n        patient: '/dashboard/patient',\n        doctor: '/dashboard/doctor',\n        pharmacy: '/dashboard/pharmacy',\n        insurance: '/dashboard/insurance',\n      };\n      setLocation(roleRoutes[response.user.role] || '/');\n    },\n    onError: (error: any) => {\n      toast({\n        variant: 'destructive',\n        title: 'Login failed',\n        description: error.message || 'Invalid credentials',\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginForm) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background p-4\">\n      <div className=\"absolute right-4 top-4\">\n        <ThemeToggle />\n      </div>\n      \n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n            <Shield className=\"h-6 w-6 text-primary\" />\n          </div>\n          <CardTitle className=\"font-serif text-2xl\">Welcome back</CardTitle>\n          <CardDescription>Sign in to your MediGuard account</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"username\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Username</FormLabel>\n                    <FormControl>\n                      <Input\n                        placeholder=\"Enter your username\"\n                        data-testid=\"input-username\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"Enter your password\"\n                        data-testid=\"input-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={loginMutation.isPending}\n                data-testid=\"button-submit-login\"\n              >\n                {loginMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Signing in...\n                  </>\n                ) : (\n                  'Sign In'\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center text-sm\">\n            <span className=\"text-muted-foreground\">Don't have an account? </span>\n            <Button\n              variant=\"link\"\n              className=\"p-0\"\n              onClick={() => setLocation('/register')}\n              data-testid=\"link-register\"\n            >\n              Sign up\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5218},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/dashboard-layout.tsx":{"content":"import { ReactNode } from 'react';\nimport { useLocation } from 'wouter';\nimport { \n  LayoutDashboard, FileText, Pill, FileHeart, \n  Lock, Activity, LogOut, Shield, Settings\n} from 'lucide-react';\nimport { \n  Sidebar, \n  SidebarContent, \n  SidebarGroup, \n  SidebarGroupContent, \n  SidebarGroupLabel, \n  SidebarMenu, \n  SidebarMenuButton, \n  SidebarMenuItem, \n  SidebarProvider,\n  SidebarTrigger,\n  SidebarHeader,\n  SidebarFooter\n} from '@/components/ui/sidebar';\nimport { Button } from '@/components/ui/button';\nimport { Avatar, AvatarFallback } from '@/components/ui/avatar';\nimport { ThemeToggle } from './theme-toggle';\nimport { useAuth } from '@/lib/auth-context';\n\ninterface DashboardLayoutProps {\n  children: ReactNode;\n  role: 'patient' | 'doctor' | 'pharmacy' | 'insurance';\n}\n\nconst navigationItems = {\n  patient: [\n    { title: 'Overview', icon: LayoutDashboard, path: '/dashboard/patient' },\n    { title: 'Medical Records', icon: FileText, path: '/dashboard/patient/records' },\n    { title: 'Access Control', icon: Lock, path: '/dashboard/patient/access' },\n    { title: 'Health Insights', icon: Activity, path: '/dashboard/patient/insights' },\n    { title: 'Blockchain Log', icon: Shield, path: '/dashboard/patient/blockchain' },\n  ],\n  doctor: [\n    { title: 'Overview', icon: LayoutDashboard, path: '/dashboard/doctor' },\n    { title: 'Create Prescription', icon: FileText, path: '/dashboard/doctor/prescribe' },\n    { title: 'My Prescriptions', icon: FileHeart, path: '/dashboard/doctor/prescriptions' },\n    { title: 'Patients', icon: Activity, path: '/dashboard/doctor/patients' },\n  ],\n  pharmacy: [\n    { title: 'Overview', icon: LayoutDashboard, path: '/dashboard/pharmacy' },\n    { title: 'Verify Prescription', icon: Shield, path: '/dashboard/pharmacy/verify' },\n    { title: 'Dispensed Records', icon: Pill, path: '/dashboard/pharmacy/dispensed' },\n  ],\n  insurance: [\n    { title: 'Overview', icon: LayoutDashboard, path: '/dashboard/insurance' },\n    { title: 'Find Plans', icon: FileHeart, path: '/dashboard/insurance/plans' },\n    { title: 'Submit Claim', icon: FileText, path: '/dashboard/insurance/submit' },\n    { title: 'My Claims', icon: Activity, path: '/dashboard/insurance/claims' },\n  ],\n};\n\nexport function DashboardLayout({ children, role }: DashboardLayoutProps) {\n  const [location, setLocation] = useLocation();\n  const { user, logout } = useAuth();\n  const items = navigationItems[role];\n\n  const handleLogout = () => {\n    logout();\n    setLocation('/login');\n  };\n\n  const style = {\n    '--sidebar-width': '16rem',\n    '--sidebar-width-icon': '3rem',\n  };\n\n  const getInitials = (name: string) => {\n    return name\n      .split(' ')\n      .map(n => n[0])\n      .join('')\n      .toUpperCase()\n      .slice(0, 2);\n  };\n\n  const roleColors = {\n    patient: 'bg-primary/10 text-primary',\n    doctor: 'bg-chart-2/10 text-chart-2',\n    pharmacy: 'bg-chart-5/10 text-chart-5',\n    insurance: 'bg-chart-4/10 text-chart-4',\n  };\n\n  return (\n    <SidebarProvider style={style as React.CSSProperties}>\n      <div className=\"flex h-screen w-full\">\n        <Sidebar>\n          <SidebarHeader className=\"border-b p-4\">\n            <div className=\"flex items-center gap-2\">\n              <Shield className=\"h-6 w-6 text-primary\" />\n              <span className=\"font-serif text-lg font-bold\">MediGuard</span>\n            </div>\n          </SidebarHeader>\n\n          <SidebarContent>\n            <SidebarGroup>\n              <SidebarGroupLabel>Navigation</SidebarGroupLabel>\n              <SidebarGroupContent>\n                <SidebarMenu>\n                  {items.map((item) => (\n                    <SidebarMenuItem key={item.title}>\n                      <SidebarMenuButton\n                        onClick={() => setLocation(item.path)}\n                        isActive={location === item.path}\n                        data-testid={`nav-${item.title.toLowerCase().replace(/\\s+/g, '-')}`}\n                      >\n                        <item.icon className=\"h-4 w-4\" />\n                        <span>{item.title}</span>\n                      </SidebarMenuButton>\n                    </SidebarMenuItem>\n                  ))}\n                </SidebarMenu>\n              </SidebarGroupContent>\n            </SidebarGroup>\n          </SidebarContent>\n\n          <SidebarFooter className=\"border-t p-4\">\n            <div className=\"mb-3 flex items-center gap-3\">\n              <Avatar>\n                <AvatarFallback className={roleColors[role]}>\n                  {user?.fullName ? getInitials(user.fullName) : 'U'}\n                </AvatarFallback>\n              </Avatar>\n              <div className=\"flex-1 overflow-hidden\">\n                <p className=\"truncate text-sm font-medium\">{user?.fullName}</p>\n                <p className=\"text-xs capitalize text-muted-foreground\">{role}</p>\n              </div>\n            </div>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"w-full justify-start\"\n              onClick={handleLogout}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"mr-2 h-4 w-4\" />\n              Logout\n            </Button>\n          </SidebarFooter>\n        </Sidebar>\n\n        <div className=\"flex flex-1 flex-col\">\n          <header className=\"flex h-16 items-center justify-between border-b px-6\">\n            <SidebarTrigger data-testid=\"button-sidebar-toggle\" />\n            <div className=\"flex items-center gap-2\">\n              <ThemeToggle />\n            </div>\n          </header>\n          <main className=\"flex-1 overflow-auto bg-background p-6\">\n            {children}\n          </main>\n        </div>\n      </div>\n    </SidebarProvider>\n  );\n}\n","size_bytes":5705},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/pages/pharmacy-verify.tsx":{"content":"import { useState } from 'react';\nimport { useMutation, useQuery } from '@tanstack/react-query';\nimport { Shield, CheckCircle, FileText } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest } from '@/lib/queryClient';\nimport { Badge } from '@/components/ui/badge';\n\nexport default function PharmacyVerify() {\n  const { toast } = useToast();\n  const [prescriptionId, setPrescriptionId] = useState('');\n  const [verifiedPrescription, setVerifiedPrescription] = useState<any>(null);\n\n  const verifyMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const response = await fetch(`/api/prescriptions/${id}/verify`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Verification failed');\n      return response.json();\n    },\n    onSuccess: (data) => {\n      setVerifiedPrescription(data);\n      toast({\n        title: 'Prescription Verified',\n        description: 'Blockchain verification successful',\n      });\n    },\n    onError: () => {\n      toast({\n        variant: 'destructive',\n        title: 'Verification Failed',\n        description: 'Invalid prescription ID or not found',\n      });\n    },\n  });\n\n  const dispenseMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest('POST', `/api/prescriptions/${id}/dispense`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Prescription Dispensed',\n        description: 'Transaction recorded on blockchain',\n      });\n      setVerifiedPrescription(null);\n      setPrescriptionId('');\n    },\n    onError: () => {\n      toast({\n        variant: 'destructive',\n        title: 'Dispense Failed',\n        description: 'Please try again',\n      });\n    },\n  });\n\n  const handleVerify = (e: React.FormEvent) => {\n    e.preventDefault();\n    verifyMutation.mutate(prescriptionId);\n  };\n\n  const handleDispense = () => {\n    if (verifiedPrescription) {\n      dispenseMutation.mutate(verifiedPrescription.id);\n    }\n  };\n\n  return (\n    <DashboardLayout role=\"pharmacy\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">Verify Prescription</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Verify prescription authenticity via blockchain\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"font-serif\">Enter Prescription ID</CardTitle>\n            <CardDescription>Scan QR code or manually enter prescription ID</CardDescription>\n          </CardHeader>\n          <CardContent>\n            <form onSubmit={handleVerify} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"prescriptionId\">Prescription ID</Label>\n                <Input\n                  id=\"prescriptionId\"\n                  value={prescriptionId}\n                  onChange={(e) => setPrescriptionId(e.target.value)}\n                  placeholder=\"Enter prescription ID\"\n                  required\n                  data-testid=\"input-prescription-id\"\n                />\n              </div>\n              <Button type=\"submit\" disabled={verifyMutation.isPending} data-testid=\"button-verify\">\n                {verifyMutation.isPending ? 'Verifying...' : (\n                  <>\n                    <Shield className=\"mr-2 h-4 w-4\" />\n                    Verify Prescription\n                  </>\n                )}\n              </Button>\n            </form>\n          </CardContent>\n        </Card>\n\n        {verifiedPrescription && (\n          <Card className=\"border-chart-2\">\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <CardTitle className=\"font-serif\">Verified Prescription</CardTitle>\n                <Badge variant=\"default\" className=\"bg-chart-2\">\n                  <CheckCircle className=\"mr-1 h-3 w-3\" />\n                  Blockchain Verified\n                </Badge>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Prescription ID</p>\n                  <p className=\"font-mono text-sm\">{verifiedPrescription.id}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Status</p>\n                  <Badge variant=\"outline\" className=\"capitalize\">{verifiedPrescription.status}</Badge>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Diagnosis</p>\n                  <p className=\"font-medium\">{verifiedPrescription.diagnosis}</p>\n                </div>\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Blockchain Hash</p>\n                  <p className=\"font-mono text-xs\">{verifiedPrescription.blockchainHash.slice(0, 16)}...</p>\n                </div>\n              </div>\n\n              {verifiedPrescription.notes && (\n                <div>\n                  <p className=\"text-sm text-muted-foreground\">Clinical Notes</p>\n                  <p className=\"text-sm\">{verifiedPrescription.notes}</p>\n                </div>\n              )}\n\n              <div>\n                <h4 className=\"mb-3 font-medium\">Medications</h4>\n                <div className=\"space-y-3\">\n                  {verifiedPrescription.items && verifiedPrescription.items.map((item: any, index: number) => (\n                    <div key={index} className=\"rounded-md border p-3\">\n                      <div className=\"flex items-start justify-between\">\n                        <div>\n                          <p className=\"font-medium\">{item.medicationName}</p>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {item.dosage} • {item.frequency} • {item.duration}\n                          </p>\n                          {item.instructions && (\n                            <p className=\"mt-1 text-sm\">{item.instructions}</p>\n                          )}\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </div>\n\n              {verifiedPrescription.status === 'pending' && (\n                <div className=\"flex justify-end pt-4\">\n                  <Button onClick={handleDispense} disabled={dispenseMutation.isPending} data-testid=\"button-dispense\">\n                    {dispenseMutation.isPending ? 'Dispensing...' : 'Mark as Dispensed'}\n                  </Button>\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7115},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport express from \"express\";\nimport jwt from \"jsonwebtoken\";\nimport bcrypt from \"bcryptjs\";\nimport multer from \"multer\";\nimport { storage } from \"./storage\";\nimport { BlockchainService } from \"./blockchain\";\nimport { HealthInsightsAnalyzer } from \"./health-insights\";\nimport { insertUserSchema, insertMedicalRecordSchema, insertPrescriptionSchema, insertPrescriptionItemSchema, insertInsuranceClaimSchema } from \"@shared/schema\";\n\nconst JWT_SECRET = process.env.SESSION_SECRET || 'mediguard-secret-key-change-in-production';\n\n// Middleware to verify JWT token\nconst authenticateToken = (req: any, res: any, next: any) => {\n  const authHeader = req.headers['authorization'];\n  const token = authHeader && authHeader.split(' ')[1];\n\n  if (!token) {\n    return res.status(401).json({ error: 'Access denied. No token provided.' });\n  }\n\n  try {\n    const verified = jwt.verify(token, JWT_SECRET);\n    req.user = verified;\n    next();\n  } catch (error) {\n    res.status(400).json({ error: 'Invalid token' });\n  }\n};\n\n// Configure multer for file uploads (in-memory storage for MVP)\nconst upload = multer({\n  storage: multer.memoryStorage(),\n  limits: { fileSize: 10 * 1024 * 1024 }, // 10MB limit\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  app.use(express.json());\n  app.use(express.urlencoded({ extended: true }));\n\n  // ==================== AUTHENTICATION ====================\n\n  app.post('/api/auth/register', async (req, res) => {\n    try {\n      const validatedData = insertUserSchema.parse(req.body);\n\n      // Check if user already exists\n      const existingUser = await storage.getUserByUsername(validatedData.username);\n      if (existingUser) {\n        return res.status(400).json({ error: 'Username already exists' });\n      }\n\n      const existingEmail = await storage.getUserByEmail(validatedData.email);\n      if (existingEmail) {\n        return res.status(400).json({ error: 'Email already exists' });\n      }\n\n      // Hash password\n      const hashedPassword = await bcrypt.hash(validatedData.password, 10);\n\n      // Create user\n      const user = await storage.createUser({\n        ...validatedData,\n        password: hashedPassword,\n      });\n\n      // Generate JWT token\n      const token = jwt.sign({ id: user.id, username: user.username, role: user.role }, JWT_SECRET, {\n        expiresIn: '7d',\n      });\n\n      // Don't send password back\n      const { password, ...userWithoutPassword } = user;\n\n      res.json({ user: userWithoutPassword, token });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message || 'Registration failed' });\n    }\n  });\n\n  app.post('/api/auth/login', async (req, res) => {\n    try {\n      const { username, password } = req.body;\n\n      const user = await storage.getUserByUsername(username);\n      if (!user) {\n        return res.status(400).json({ error: 'Invalid credentials' });\n      }\n\n      const validPassword = await bcrypt.compare(password, user.password);\n      if (!validPassword) {\n        return res.status(400).json({ error: 'Invalid credentials' });\n      }\n\n      const token = jwt.sign({ id: user.id, username: user.username, role: user.role }, JWT_SECRET, {\n        expiresIn: '7d',\n      });\n\n      const { password: _, ...userWithoutPassword } = user;\n\n      res.json({ user: userWithoutPassword, token });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message || 'Login failed' });\n    }\n  });\n\n  // ==================== PATIENT ENDPOINTS ====================\n\n  app.get('/api/patient/stats', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n\n      const records = await storage.getMedicalRecords(userId);\n      const insights = await storage.getHealthInsights(userId);\n      const transactions = await storage.getBlockchainTransactions({ actorId: userId });\n\n      // Count shared records\n      let sharedCount = 0;\n      for (const record of records) {\n        const permissions = await storage.getAccessPermissions(record.id);\n        if (permissions.length > 0) sharedCount++;\n      }\n\n      res.json({\n        totalRecords: records.length,\n        sharedRecords: sharedCount,\n        totalInsights: insights.length,\n        blockchainTransactions: transactions.length,\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/medical-records', authenticateToken, upload.single('file'), async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const file = (req as any).file;\n\n      if (!file) {\n        return res.status(400).json({ error: 'No file uploaded' });\n      }\n\n      // In production, upload to cloud storage (S3, etc.)\n      // For MVP, we'll store file info and simulate upload\n      const fileUrl = `/uploads/${Date.now()}-${file.originalname}`;\n\n      const record = await storage.createMedicalRecord({\n        patientId: userId,\n        title: req.body.title,\n        description: req.body.description || '',\n        fileType: file.mimetype,\n        fileUrl,\n        fileSize: file.size,\n        recordType: req.body.recordType,\n      });\n\n      // Log blockchain transaction\n      await BlockchainService.recordTransaction(\n        userId,\n        'upload_record',\n        'medical_record',\n        record.id,\n        { title: record.title, fileType: record.fileType }\n      );\n\n      // Analyze for health insights\n      if (req.body.description) {\n        await HealthInsightsAnalyzer.analyzeRecord(record.id, userId, req.body.description);\n      }\n\n      res.json(record);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/medical-records', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const records = await storage.getMedicalRecords(userId);\n      res.json(records);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/access-permissions', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const { recordId, grantedToId } = req.body;\n\n      // Verify ownership before granting access\n      const record = await storage.getMedicalRecord(recordId);\n      if (!record || record.patientId !== userId) {\n        return res.status(403).json({ error: 'Access denied. You can only grant access to your own records.' });\n      }\n\n      const permission = await storage.createAccessPermission({\n        recordId,\n        grantedToId,\n        grantedById: userId,\n        accessLevel: 'view',\n      });\n\n      // Log blockchain transaction\n      await BlockchainService.recordTransaction(\n        userId,\n        'grant_access',\n        'medical_record',\n        recordId,\n        { grantedTo: grantedToId }\n      );\n\n      res.json(permission);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/access-permissions', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const recordId = req.query.recordId as string;\n\n      if (recordId) {\n        // Verify ownership before returning permissions\n        const record = await storage.getMedicalRecord(recordId);\n        if (!record || record.patientId !== userId) {\n          return res.status(403).json({ error: 'Access denied. You do not own this record.' });\n        }\n        \n        const permissions = await storage.getAccessPermissions(recordId);\n        res.json(permissions);\n      } else {\n        // Get all permissions for user's records\n        const records = await storage.getMedicalRecords(userId);\n        const allPermissions: any[] = [];\n        \n        for (const record of records) {\n          const perms = await storage.getAccessPermissions(record.id);\n          allPermissions.push(...perms.map(p => ({ ...p, recordTitle: record.title })));\n        }\n        \n        res.json(allPermissions);\n      }\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.delete('/api/access-permissions/:id', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const permissionId = req.params.id;\n\n      // Verify ownership before revoking - get the permission first\n      const permission = await storage.getAccessPermission(permissionId);\n      if (!permission) {\n        return res.status(404).json({ error: 'Permission not found' });\n      }\n      \n      // Verify the permission was granted by this user\n      if (permission.grantedById !== userId) {\n        return res.status(403).json({ error: 'Access denied. You can only revoke permissions you granted.' });\n      }\n\n      await storage.revokeAccessPermission(permissionId);\n\n      // Log blockchain transaction\n      await BlockchainService.recordTransaction(\n        userId,\n        'revoke_access',\n        'access_permission',\n        permissionId,\n        {}\n      );\n\n      res.json({ success: true });\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/health-insights', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const insights = await storage.getHealthInsights(userId);\n      res.json(insights);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ==================== DOCTOR ENDPOINTS ====================\n\n  app.get('/api/doctor/stats', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n\n      const prescriptions = await storage.getPrescriptions({ doctorId: userId });\n      const pending = prescriptions.filter(p => p.status === 'pending').length;\n      const dispensed = prescriptions.filter(p => p.status === 'dispensed').length;\n\n      // Count unique patients\n      const uniquePatients = new Set(prescriptions.map(p => p.patientId));\n\n      res.json({\n        totalPrescriptions: prescriptions.length,\n        pendingPrescriptions: pending,\n        dispensedPrescriptions: dispensed,\n        totalPatients: uniquePatients.size,\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/prescriptions', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const { prescription, medications } = req.body;\n\n      // Create blockchain hash for prescription\n      const blockchainHash = BlockchainService.createResourceHash({\n        doctorId: userId,\n        patientId: prescription.patientId,\n        diagnosis: prescription.diagnosis,\n        medications,\n        timestamp: new Date(),\n      });\n\n      const newPrescription = await storage.createPrescription({\n        patientId: prescription.patientId,\n        doctorId: userId,\n        diagnosis: prescription.diagnosis,\n        notes: prescription.notes || '',\n        blockchainHash,\n      });\n\n      // Create prescription items\n      const items = medications.map((med: any) => ({\n        prescriptionId: newPrescription.id,\n        medicationName: med.medicationName,\n        dosage: med.dosage,\n        frequency: med.frequency,\n        duration: med.duration,\n        instructions: med.instructions || '',\n      }));\n\n      await storage.createPrescriptionItems(items);\n\n      // Log blockchain transaction\n      await BlockchainService.recordTransaction(\n        userId,\n        'create_prescription',\n        'prescription',\n        newPrescription.id,\n        { patientId: prescription.patientId, diagnosis: prescription.diagnosis }\n      );\n\n      res.json(newPrescription);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/prescriptions', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const role = (req as any).user.role;\n\n      let prescriptions;\n      if (role === 'doctor') {\n        prescriptions = await storage.getPrescriptions({ doctorId: userId });\n      } else if (role === 'patient') {\n        prescriptions = await storage.getPrescriptions({ patientId: userId });\n      } else {\n        prescriptions = await storage.getPrescriptions({});\n      }\n\n      res.json(prescriptions);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/prescriptions/:id', authenticateToken, async (req, res) => {\n    try {\n      const prescription = await storage.getPrescription(req.params.id);\n      if (!prescription) {\n        return res.status(404).json({ error: 'Prescription not found' });\n      }\n\n      const items = await storage.getPrescriptionItems(prescription.id);\n\n      res.json({ ...prescription, items });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  // ==================== PHARMACY ENDPOINTS ====================\n\n  app.get('/api/pharmacy/stats', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n\n      const allPrescriptions = await storage.getPrescriptions({});\n      const dispensedByMe = allPrescriptions.filter(p => p.dispensedById === userId);\n\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n\n      const dispensedToday = dispensedByMe.filter(p => {\n        if (!p.dispensedAt) return false;\n        const dispenseDate = new Date(p.dispensedAt);\n        dispenseDate.setHours(0, 0, 0, 0);\n        return dispenseDate.getTime() === today.getTime();\n      }).length;\n\n      res.json({\n        verifiedPrescriptions: dispensedToday,\n        dispensedToday,\n        totalDispensed: dispensedByMe.length,\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/prescriptions/:id/verify', authenticateToken, async (req, res) => {\n    try {\n      const prescription = await storage.getPrescription(req.params.id);\n      if (!prescription) {\n        return res.status(404).json({ error: 'Prescription not found' });\n      }\n\n      const items = await storage.getPrescriptionItems(prescription.id);\n\n      res.json({\n        ...prescription,\n        items,\n        verified: true,\n        message: 'Prescription verified on blockchain',\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/prescriptions/:id/dispense', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const prescriptionId = req.params.id;\n\n      const prescription = await storage.updatePrescriptionStatus(prescriptionId, 'dispensed', userId);\n\n      // Log blockchain transaction\n      await BlockchainService.recordTransaction(\n        userId,\n        'dispense_prescription',\n        'prescription',\n        prescriptionId,\n        {}\n      );\n\n      res.json(prescription);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // ==================== INSURANCE ENDPOINTS ====================\n\n  app.get('/api/insurance/stats', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const role = (req as any).user.role;\n\n      let claims;\n      if (role === 'patient') {\n        claims = await storage.getInsuranceClaims({ patientId: userId });\n      } else if (role === 'insurance') {\n        claims = await storage.getInsuranceClaims({ agentId: userId });\n      } else {\n        claims = await storage.getInsuranceClaims({});\n      }\n\n      res.json({\n        totalClaims: claims.length,\n        pendingClaims: claims.filter(c => c.status === 'submitted' || c.status === 'under_review').length,\n        approvedClaims: claims.filter(c => c.status === 'approved' || c.status === 'paid').length,\n        rejectedClaims: claims.filter(c => c.status === 'rejected').length,\n      });\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.post('/api/claims', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n\n      // Create blockchain hash for claim\n      const blockchainHash = BlockchainService.createResourceHash({\n        patientId: userId,\n        policyNumber: req.body.policyNumber,\n        claimAmount: req.body.claimAmount,\n        timestamp: new Date(),\n      });\n\n      const claim = await storage.createInsuranceClaim({\n        patientId: userId,\n        policyNumber: req.body.policyNumber,\n        policyProvider: req.body.policyProvider,\n        claimAmount: req.body.claimAmount,\n        claimType: req.body.claimType,\n        description: req.body.description,\n        supportingDocuments: req.body.supportingDocuments || [],\n        blockchainHash,\n      });\n\n      // Log blockchain transaction\n      await BlockchainService.recordTransaction(\n        userId,\n        'submit_claim',\n        'insurance_claim',\n        claim.id,\n        { claimAmount: claim.claimAmount, policyNumber: claim.policyNumber }\n      );\n\n      res.json(claim);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  app.get('/api/claims', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const role = (req as any).user.role;\n\n      let claims;\n      if (role === 'patient') {\n        claims = await storage.getInsuranceClaims({ patientId: userId });\n      } else if (role === 'insurance') {\n        claims = await storage.getInsuranceClaims({ agentId: userId });\n      } else {\n        claims = await storage.getInsuranceClaims({});\n      }\n\n      res.json(claims);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  app.patch('/api/claims/:id', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const { status, reviewNotes } = req.body;\n\n      const claim = await storage.updateClaimStatus(req.params.id, status, reviewNotes);\n\n      // Log blockchain transaction\n      await BlockchainService.recordTransaction(\n        userId,\n        'update_claim_status',\n        'insurance_claim',\n        claim.id,\n        { newStatus: status }\n      );\n\n      res.json(claim);\n    } catch (error: any) {\n      res.status(400).json({ error: error.message });\n    }\n  });\n\n  // ==================== BLOCKCHAIN ENDPOINTS ====================\n\n  app.get('/api/blockchain/transactions', authenticateToken, async (req, res) => {\n    try {\n      const userId = (req as any).user.id;\n      const transactions = await storage.getBlockchainTransactions({ actorId: userId });\n      res.json(transactions);\n    } catch (error: any) {\n      res.status(500).json({ error: error.message });\n    }\n  });\n\n  const httpServer = createServer(app);\n\n  return httpServer;\n}\n","size_bytes":18987},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState, ReactNode } from 'react';\n\ntype Theme = 'light' | 'dark';\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>('light');\n\n  useEffect(() => {\n    const stored = localStorage.getItem('theme') as Theme;\n    if (stored) {\n      setTheme(stored);\n    }\n  }, []);\n\n  useEffect(() => {\n    const root = document.documentElement;\n    if (theme === 'dark') {\n      root.classList.add('dark');\n    } else {\n      root.classList.remove('dark');\n    }\n    localStorage.setItem('theme', theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === 'light' ? 'dark' : 'light'));\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error('useTheme must be used within a ThemeProvider');\n  }\n  return context;\n}\n","size_bytes":1192},"client/src/pages/insurance-dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { FileText, Clock, CheckCircle, XCircle, ExternalLink } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { useAuth } from '@/lib/auth-context';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\n\nexport default function InsuranceDashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/insurance/stats'],\n  });\n\n  if (isLoading) {\n    return (\n      <DashboardLayout role=\"insurance\">\n        <div className=\"space-y-6\">\n          <div>\n            <Skeleton className=\"h-8 w-64\" />\n            <Skeleton className=\"mt-2 h-4 w-96\" />\n          </div>\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n            {[...Array(4)].map((_, i) => (\n              <Skeleton key={i} className=\"h-32\" />\n            ))}\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  const statsData = stats || {\n    totalClaims: 0,\n    pendingClaims: 0,\n    approvedClaims: 0,\n    rejectedClaims: 0,\n  };\n\n  return (\n    <DashboardLayout role=\"insurance\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">Welcome, {user?.fullName}</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Manage insurance claims with blockchain transparency\n          </p>\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Claims</CardTitle>\n              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-total-claims\">\n                {statsData.totalClaims}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">All submissions</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n              <Clock className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-pending-claims\">\n                {statsData.pendingClaims}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Under review</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Approved</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-approved-claims\">\n                {statsData.approvedClaims}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Successfully processed</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Rejected</CardTitle>\n              <XCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-rejected-claims\">\n                {statsData.rejectedClaims}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Declined claims</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid gap-6 lg:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-serif\">Find Best Insurance Plans</CardTitle>\n              <CardDescription>Compare and purchase health insurance policies</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <p className=\"text-sm text-muted-foreground\">\n                Browse comprehensive health insurance plans from top providers. Compare coverage,\n                premiums, and benefits to find the perfect plan for you.\n              </p>\n              <Button\n                className=\"w-full\"\n                onClick={() => window.open('https://www.policybazaar.com/health-insurance/', '_blank')}\n                data-testid=\"button-policybazaar\"\n              >\n                <ExternalLink className=\"mr-2 h-4 w-4\" />\n                Browse Plans on PolicyBazaar\n              </Button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-serif\">Claim Management</CardTitle>\n              <CardDescription>Submit and track insurance claims</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <button\n                className=\"flex w-full items-center gap-3 rounded-md border p-4 text-left transition-colors hover-elevate active-elevate-2\"\n                onClick={() => setLocation('/dashboard/insurance/submit')}\n                data-testid=\"button-submit-claim\"\n              >\n                <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-chart-4/10\">\n                  <FileText className=\"h-5 w-5 text-chart-4\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium\">Submit New Claim</p>\n                  <p className=\"text-sm text-muted-foreground\">File a new insurance claim</p>\n                </div>\n              </button>\n\n              <button\n                className=\"flex w-full items-center gap-3 rounded-md border p-4 text-left transition-colors hover-elevate active-elevate-2\"\n                onClick={() => setLocation('/dashboard/insurance/claims')}\n                data-testid=\"button-view-claims\"\n              >\n                <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10\">\n                  <Clock className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium\">Track My Claims</p>\n                  <p className=\"text-sm text-muted-foreground\">View claim status and history</p>\n                </div>\n              </button>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":6927},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/pages/patient-records.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Upload, FileText, Download, Eye } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { queryClient, apiRequest } from '@/lib/queryClient';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { format } from 'date-fns';\n\nexport default function PatientRecords() {\n  const { toast } = useToast();\n  const [isUploadOpen, setIsUploadOpen] = useState(false);\n  const [formData, setFormData] = useState({\n    title: '',\n    description: '',\n    recordType: 'lab_report',\n    file: null as File | null,\n  });\n\n  const { data: records, isLoading } = useQuery({\n    queryKey: ['/api/medical-records'],\n  });\n\n  const uploadMutation = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      const formDataObj = new FormData();\n      formDataObj.append('title', data.title);\n      formDataObj.append('description', data.description);\n      formDataObj.append('recordType', data.recordType);\n      if (data.file) {\n        formDataObj.append('file', data.file);\n      }\n\n      const token = localStorage.getItem('token');\n      const response = await fetch('/api/medical-records', {\n        method: 'POST',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n        body: formDataObj,\n      });\n\n      if (!response.ok) {\n        throw new Error('Upload failed');\n      }\n\n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Success',\n        description: 'Medical record uploaded successfully',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/medical-records'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/patient/stats'] });\n      setIsUploadOpen(false);\n      setFormData({ title: '', description: '', recordType: 'lab_report', file: null });\n    },\n    onError: () => {\n      toast({\n        variant: 'destructive',\n        title: 'Upload failed',\n        description: 'There was an error uploading your file',\n      });\n    },\n  });\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (e.target.files && e.target.files[0]) {\n      setFormData({ ...formData, file: e.target.files[0] });\n    }\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!formData.file) {\n      toast({\n        variant: 'destructive',\n        title: 'No file selected',\n        description: 'Please select a file to upload',\n      });\n      return;\n    }\n    uploadMutation.mutate(formData);\n  };\n\n  return (\n    <DashboardLayout role=\"patient\">\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"font-serif text-3xl font-bold\">Medical Records</h1>\n            <p className=\"mt-2 text-muted-foreground\">\n              Upload and manage your medical documents\n            </p>\n          </div>\n          <Dialog open={isUploadOpen} onOpenChange={setIsUploadOpen}>\n            <DialogTrigger asChild>\n              <Button data-testid=\"button-upload-record\">\n                <Upload className=\"mr-2 h-4 w-4\" />\n                Upload Record\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>Upload Medical Record</DialogTitle>\n                <DialogDescription>\n                  Add a new medical document to your health records\n                </DialogDescription>\n              </DialogHeader>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    value={formData.title}\n                    onChange={(e) => setFormData({ ...formData, title: e.target.value })}\n                    placeholder=\"e.g., Blood Test Results\"\n                    required\n                    data-testid=\"input-record-title\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"recordType\">Record Type</Label>\n                  <Select\n                    value={formData.recordType}\n                    onValueChange={(value) => setFormData({ ...formData, recordType: value })}\n                  >\n                    <SelectTrigger data-testid=\"select-record-type\">\n                      <SelectValue />\n                    </SelectTrigger>\n                    <SelectContent>\n                      <SelectItem value=\"lab_report\">Lab Report</SelectItem>\n                      <SelectItem value=\"prescription\">Prescription</SelectItem>\n                      <SelectItem value=\"imaging\">Imaging (X-ray, MRI, CT)</SelectItem>\n                      <SelectItem value=\"discharge_summary\">Discharge Summary</SelectItem>\n                      <SelectItem value=\"vaccination\">Vaccination Record</SelectItem>\n                      <SelectItem value=\"other\">Other</SelectItem>\n                    </SelectContent>\n                  </Select>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"description\">Description (Optional)</Label>\n                  <Textarea\n                    id=\"description\"\n                    value={formData.description}\n                    onChange={(e) => setFormData({ ...formData, description: e.target.value })}\n                    placeholder=\"e.g., BP: 120/80, Glucose: 95 mg/dL\"\n                    data-testid=\"textarea-description\"\n                  />\n                  <p className=\"mt-1 text-xs text-muted-foreground\">\n                    Include health metrics for AI analysis (BP, glucose, cholesterol, etc.)\n                  </p>\n                </div>\n\n                <div>\n                  <Label htmlFor=\"file\">File</Label>\n                  <Input\n                    id=\"file\"\n                    type=\"file\"\n                    onChange={handleFileChange}\n                    accept=\".pdf,.jpg,.jpeg,.png\"\n                    required\n                    data-testid=\"input-file\"\n                  />\n                </div>\n\n                <div className=\"flex justify-end gap-2\">\n                  <Button type=\"button\" variant=\"outline\" onClick={() => setIsUploadOpen(false)}>\n                    Cancel\n                  </Button>\n                  <Button type=\"submit\" disabled={uploadMutation.isPending} data-testid=\"button-submit-upload\">\n                    {uploadMutation.isPending ? 'Uploading...' : 'Upload'}\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {[...Array(6)].map((_, i) => (\n              <Skeleton key={i} className=\"h-48\" />\n            ))}\n          </div>\n        ) : records && records.length > 0 ? (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {records.map((record: any) => (\n              <Card key={record.id} data-testid={`card-record-${record.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex items-center gap-2\">\n                      <FileText className=\"h-5 w-5 text-primary\" />\n                      <CardTitle className=\"text-base\">{record.title}</CardTitle>\n                    </div>\n                  </div>\n                  <CardDescription className=\"capitalize\">\n                    {record.recordType.replace('_', ' ')}\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  {record.description && (\n                    <p className=\"mb-4 text-sm text-muted-foreground line-clamp-2\">\n                      {record.description}\n                    </p>\n                  )}\n                  <div className=\"mb-4 text-xs text-muted-foreground\">\n                    Uploaded {format(new Date(record.uploadedAt), 'MMM d, yyyy')}\n                  </div>\n                  <div className=\"flex gap-2\">\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\" data-testid=\"button-view-record\">\n                      <Eye className=\"mr-2 h-3 w-3\" />\n                      View\n                    </Button>\n                    <Button size=\"sm\" variant=\"outline\" className=\"flex-1\" data-testid=\"button-download-record\">\n                      <Download className=\"mr-2 h-3 w-3\" />\n                      Download\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <FileText className=\"h-16 w-16 text-muted-foreground/50\" />\n              <h3 className=\"mt-4 font-serif text-xl font-semibold\">No medical records yet</h3>\n              <p className=\"mt-2 text-sm text-muted-foreground\">\n                Upload your first medical document to get started\n              </p>\n              <Button className=\"mt-6\" onClick={() => setIsUploadOpen(true)} data-testid=\"button-upload-first\">\n                <Upload className=\"mr-2 h-4 w-4\" />\n                Upload Record\n              </Button>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":10062},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/pharmacy-dispensed.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Pill, CheckCircle } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Badge } from '@/components/ui/badge';\nimport { format } from 'date-fns';\nimport { useAuth } from '@/lib/auth-context';\n\nexport default function PharmacyDispensed() {\n  const { user } = useAuth();\n  const { data: prescriptions, isLoading } = useQuery({\n    queryKey: ['/api/prescriptions'],\n  });\n\n  const dispensedByMe = prescriptions?.filter((p: any) => p.dispensedById === user?.id && p.status === 'dispensed') || [];\n\n  return (\n    <DashboardLayout role=\"pharmacy\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">Dispensed Records</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            History of prescriptions you've dispensed\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {[...Array(4)].map((_, i) => (\n              <Skeleton key={i} className=\"h-40\" />\n            ))}\n          </div>\n        ) : dispensedByMe.length > 0 ? (\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {dispensedByMe.map((prescription: any) => (\n              <Card key={prescription.id} data-testid={`dispensed-${prescription.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-base\">#{prescription.id.slice(0, 8)}</CardTitle>\n                      <CardDescription>{prescription.diagnosis}</CardDescription>\n                    </div>\n                    <Badge className=\"bg-chart-2\">\n                      <CheckCircle className=\"mr-1 h-3 w-3\" />\n                      Dispensed\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-2\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Patient ID</p>\n                    <code className=\"text-sm font-mono\">{prescription.patientId.slice(0, 12)}...</code>\n                  </div>\n\n                  <div className=\"text-xs text-muted-foreground\">\n                    Dispensed {format(new Date(prescription.dispensedAt), 'MMM d, yyyy h:mm a')}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <Pill className=\"h-16 w-16 text-muted-foreground/50\" />\n              <h3 className=\"mt-4 font-serif text-xl font-semibold\">No dispensed records yet</h3>\n              <p className=\"mt-2 text-sm text-muted-foreground\">\n                Prescriptions you dispense will appear here\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":3153},"design_guidelines.md":{"content":"# MediGuard Design Guidelines\n\n## Design Approach: Healthcare-Focused Design System\n\n**Selected Approach**: Medical Design System with Material Design principles\n**Justification**: Healthcare applications demand trust, clarity, and accessibility. Drawing from leading healthcare platforms (Epic, Cerner, HealthKit) and Material Design for data-heavy interfaces.\n\n**Core Principles**:\n- Medical-grade clarity and precision\n- Trust-building through professional aesthetics\n- Role-based visual hierarchy\n- Blockchain transparency visualization\n\n---\n\n## Color Palette\n\n### Primary Colors (Medical Trust Theme)\n- **Primary Medical Blue**: 210 85% 45% (trust, professionalism)\n- **Deep Navy**: 220 40% 20% (headers, emphasis)\n- **Success Green**: 145 65% 45% (verification, approvals)\n- **Alert Red**: 0 70% 50% (warnings, critical actions)\n\n### Light Mode\n- Background: 210 20% 98%\n- Surface: 0 0% 100%\n- Text Primary: 220 15% 15%\n- Text Secondary: 220 10% 45%\n- Borders: 210 15% 85%\n\n### Dark Mode\n- Background: 220 25% 8%\n- Surface: 220 20% 12%\n- Text Primary: 210 10% 95%\n- Text Secondary: 210 8% 70%\n- Borders: 220 15% 20%\n\n### Accent Colors\n- **Blockchain Purple**: 270 60% 55% (blockchain features)\n- **Insurance Orange**: 25 75% 55% (insurance elements)\n- **Pharmacy Teal**: 180 55% 50% (pharmacy actions)\n\n---\n\n## Typography\n\n**Font Families**:\n- Primary: \"Inter\" (UI, forms, data)\n- Secondary: \"Manrope\" (headings, emphasis)\n- Monospace: \"JetBrains Mono\" (blockchain hashes, technical data)\n\n**Scale**:\n- Display: 48px/56px, font-bold\n- H1: 36px/44px, font-bold\n- H2: 28px/36px, font-semibold\n- H3: 22px/30px, font-semibold\n- Body: 16px/24px, font-normal\n- Small: 14px/20px, font-normal\n- Caption: 12px/16px, font-medium\n\n---\n\n## Layout System\n\n**Spacing Primitives**: Use Tailwind units of **2, 4, 6, 8, 12, 16, 20**\n- Micro spacing: p-2, gap-2 (tight elements)\n- Component spacing: p-4, p-6, gap-4 (cards, forms)\n- Section spacing: p-8, p-12, py-16, py-20 (page sections)\n\n**Grid System**:\n- Container: max-w-7xl mx-auto px-4 md:px-8\n- Dashboard Layouts: 12-column grid with sidebar (aside: w-64, main: flex-1)\n- Card Grids: grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\n\n---\n\n## Component Library\n\n### Navigation\n**Top Navigation Bar**:\n- Height: h-16, sticky top-0\n- Logo + User role badge + notifications + profile dropdown\n- Background: blur backdrop with border-b\n- Active state: border-b-2 border-primary\n\n**Sidebar Navigation** (Dashboard):\n- Width: w-64, fixed left\n- Icons + labels, grouped by category\n- Active state: bg-primary/10 with left border indicator\n\n### Data Display Components\n\n**Medical Record Cards**:\n- White/dark surface with shadow-md\n- Header: Patient name + date + status badge\n- Body: Scrollable content area with file previews\n- Footer: Action buttons (View, Download, Share)\n- Border-left color coding by record type\n\n**Prescription Cards**:\n- Pharmacy-specific green accent\n- Doctor info + medication list + blockchain verification badge\n- QR code display for pharmacy scanning\n- Status indicator (Pending/Verified/Dispensed)\n\n**Blockchain Transaction Table**:\n- Monospace font for hashes\n- Color-coded action types (Grant: green, Revoke: red, View: blue)\n- Timestamp + actor + action columns\n- Copy-to-clipboard for hash values\n\n**Claim Status Timeline**:\n- Vertical stepper component\n- Current step highlighted with pulse animation\n- Completed steps: check icon, green\n- Pending steps: gray with dashed connector\n\n### Forms\n\n**Medical Upload Form**:\n- Drag-and-drop zone with dashed border\n- File preview thumbnails (PDF icons, image previews)\n- Progress bars for uploads\n- Access control checkboxes for role-based sharing\n\n**Prescription Form** (Doctor):\n- Autocomplete medication search\n- Dosage + frequency + duration inputs\n- Digital signature pad\n- Blockchain submission confirmation modal\n\n**Insurance Claim Form**:\n- Multi-step wizard (3 steps: Details, Documents, Review)\n- Progress indicator at top\n- File upload for policy documents\n- Summary card before submission\n\n### Data Visualization\n\n**Health Dashboard Charts** (Chart.js):\n- Line charts: Health metrics over time (BP, glucose)\n- Donut charts: Prescription adherence\n- Bar charts: Monthly health score trends\n- Color scheme matches primary palette\n- Tooltips with precise values\n\n**Access Control Matrix**:\n- Table view with toggles\n- Columns: Provider name, role, access level, granted date\n- Quick revoke button per row\n- Filter by role type\n\n### Buttons & Actions\n\n**Primary Actions**:\n- bg-primary text-white, rounded-lg, px-6 py-3\n- Hover: slight scale + brightness increase\n- Disabled: opacity-50, cursor-not-allowed\n\n**Secondary Actions**:\n- border-2 border-primary text-primary bg-transparent\n- Used for cancel, back actions\n\n**Destructive Actions**:\n- bg-red-600 text-white (Delete, Revoke)\n- Confirmation modal required\n\n### Modals & Overlays\n\n**Blockchain Confirmation Modal**:\n- Center-screen overlay with backdrop blur\n- Transaction details summary\n- Gas fee estimate (simulated)\n- Confirm/Cancel buttons\n- Loading spinner during submission\n\n**Access Grant/Revoke Modal**:\n- List of providers with checkboxes\n- Preview of data they'll access\n- Blockchain transaction preview\n- Warning for sensitive data\n\n---\n\n## Images & Visual Assets\n\n**Hero Image**: \n- Landing page: Medical professional reviewing blockchain data visualization on screen\n- Dimensions: Full viewport width, 60vh height\n- Overlay: gradient from transparent to dark at bottom\n- CTA buttons with backdrop-blur background\n\n**Dashboard Backgrounds**:\n- Subtle medical pattern (DNA helix, heartbeat line) at 5% opacity\n- Or: Abstract blockchain node network visualization\n\n**Icons**:\n- Use Heroicons for general UI\n- Custom medical icons for: stethoscope, prescription, insurance card, blockchain link\n- Role badges: color-coded circular avatars with first letter\n\n---\n\n## Role-Specific Theming\n\n**Patient Dashboard**: Blue primary, emphasis on access control\n**Doctor Dashboard**: Green accents, focus on prescription creation\n**Pharmacy Dashboard**: Teal accents, verification-focused\n**Insurance Dashboard**: Orange accents, claim processing focus\n\n---\n\n## Accessibility & Quality\n\n- WCAG AA contrast ratios minimum\n- Focus states: 2px ring with offset\n- Keyboard navigation throughout\n- Screen reader labels for all interactive elements\n- Loading states for all async actions\n- Error states with clear messaging\n\n---\n\n## Animation Principles\n\n**Use Sparingly**:\n- Page transitions: 200ms ease-in-out\n- Blockchain transaction confirmation: Success checkmark animation\n- Notification toasts: Slide in from top-right\n- No decorative animations - function only","size_bytes":6645},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/register.tsx":{"content":"import { useLocation } from 'wouter';\nimport { useMutation } from '@tanstack/react-query';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Shield, Loader2 } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\nimport { Input } from '@/components/ui/input';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { useAuth } from '@/lib/auth-context';\nimport { apiRequest } from '@/lib/queryClient';\nimport { ThemeToggle } from '@/components/theme-toggle';\n\nconst registerSchema = z.object({\n  username: z.string().min(3, 'Username must be at least 3 characters'),\n  email: z.string().email('Invalid email address'),\n  password: z.string().min(6, 'Password must be at least 6 characters'),\n  fullName: z.string().min(2, 'Full name is required'),\n  role: z.enum(['patient', 'doctor', 'pharmacy', 'insurance']),\n  phone: z.string().optional(),\n  specialization: z.string().optional(),\n  licenseNumber: z.string().optional(),\n});\n\ntype RegisterForm = z.infer<typeof registerSchema>;\n\nexport default function Register() {\n  const [, setLocation] = useLocation();\n  const { login } = useAuth();\n  const { toast } = useToast();\n\n  const form = useForm<RegisterForm>({\n    resolver: zodResolver(registerSchema),\n    defaultValues: {\n      username: '',\n      email: '',\n      password: '',\n      fullName: '',\n      role: 'patient',\n      phone: '',\n      specialization: '',\n      licenseNumber: '',\n    },\n  });\n\n  const selectedRole = form.watch('role');\n\n  const registerMutation = useMutation({\n    mutationFn: async (data: RegisterForm) => {\n      return await apiRequest('POST', '/api/auth/register', data);\n    },\n    onSuccess: (response: any) => {\n      login(response.user, response.token);\n      toast({\n        title: 'Account created!',\n        description: 'Welcome to MediGuard.',\n      });\n      \n      const roleRoutes: Record<string, string> = {\n        patient: '/dashboard/patient',\n        doctor: '/dashboard/doctor',\n        pharmacy: '/dashboard/pharmacy',\n        insurance: '/dashboard/insurance',\n      };\n      setLocation(roleRoutes[response.user.role] || '/');\n    },\n    onError: (error: any) => {\n      toast({\n        variant: 'destructive',\n        title: 'Registration failed',\n        description: error.message || 'Something went wrong',\n      });\n    },\n  });\n\n  const onSubmit = (data: RegisterForm) => {\n    registerMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-background p-4\">\n      <div className=\"absolute right-4 top-4\">\n        <ThemeToggle />\n      </div>\n      \n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1 text-center\">\n          <div className=\"mx-auto mb-4 flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n            <Shield className=\"h-6 w-6 text-primary\" />\n          </div>\n          <CardTitle className=\"font-serif text-2xl\">Create an account</CardTitle>\n          <CardDescription>Join MediGuard's secure healthcare platform</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"role\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Account Type</FormLabel>\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\n                      <FormControl>\n                        <SelectTrigger data-testid=\"select-role\">\n                          <SelectValue placeholder=\"Select your role\" />\n                        </SelectTrigger>\n                      </FormControl>\n                      <SelectContent>\n                        <SelectItem value=\"patient\">Patient</SelectItem>\n                        <SelectItem value=\"doctor\">Doctor</SelectItem>\n                        <SelectItem value=\"pharmacy\">Pharmacy</SelectItem>\n                        <SelectItem value=\"insurance\">Insurance Agent</SelectItem>\n                      </SelectContent>\n                    </Select>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <div className=\"grid gap-4 sm:grid-cols-2\">\n                <FormField\n                  control={form.control}\n                  name=\"fullName\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Full Name</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"John Doe\" data-testid=\"input-fullname\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n\n                <FormField\n                  control={form.control}\n                  name=\"username\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Username</FormLabel>\n                      <FormControl>\n                        <Input placeholder=\"johndoe\" data-testid=\"input-username\" {...field} />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Email</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"email\"\n                        placeholder=\"john@example.com\"\n                        data-testid=\"input-email\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Password</FormLabel>\n                    <FormControl>\n                      <Input\n                        type=\"password\"\n                        placeholder=\"••••••••\"\n                        data-testid=\"input-password\"\n                        {...field}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Phone Number</FormLabel>\n                    <FormControl>\n                      <Input placeholder=\"+1 (555) 000-0000\" data-testid=\"input-phone\" {...field} />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              {(selectedRole === 'doctor' || selectedRole === 'pharmacy') && (\n                <FormField\n                  control={form.control}\n                  name=\"licenseNumber\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>License Number</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"Enter license number\"\n                          data-testid=\"input-license\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              {selectedRole === 'doctor' && (\n                <FormField\n                  control={form.control}\n                  name=\"specialization\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Specialization</FormLabel>\n                      <FormControl>\n                        <Input\n                          placeholder=\"e.g., Cardiology\"\n                          data-testid=\"input-specialization\"\n                          {...field}\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              )}\n\n              <Button\n                type=\"submit\"\n                className=\"w-full\"\n                disabled={registerMutation.isPending}\n                data-testid=\"button-submit-register\"\n              >\n                {registerMutation.isPending ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Creating account...\n                  </>\n                ) : (\n                  'Create Account'\n                )}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center text-sm\">\n            <span className=\"text-muted-foreground\">Already have an account? </span>\n            <Button\n              variant=\"link\"\n              className=\"p-0\"\n              onClick={() => setLocation('/login')}\n              data-testid=\"link-login\"\n            >\n              Sign in\n            </Button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":9905},"server/storage.ts":{"content":"// Referenced from javascript_database blueprint\nimport {\n  users, medicalRecords, accessPermissions, prescriptions, prescriptionItems,\n  insuranceClaims, blockchainTransactions, healthInsights,\n  type User, type InsertUser, type MedicalRecord, type InsertMedicalRecord,\n  type AccessPermission, type InsertAccessPermission, type Prescription, type InsertPrescription,\n  type PrescriptionItem, type InsertPrescriptionItem, type InsuranceClaim, type InsertInsuranceClaim,\n  type BlockchainTransaction, type HealthInsight, type InsertHealthInsight\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  // Medical Records\n  createMedicalRecord(record: InsertMedicalRecord): Promise<MedicalRecord>;\n  getMedicalRecords(patientId: string): Promise<MedicalRecord[]>;\n  getMedicalRecord(id: string): Promise<MedicalRecord | undefined>;\n\n  // Access Permissions\n  createAccessPermission(permission: InsertAccessPermission): Promise<AccessPermission>;\n  getAccessPermissions(recordId: string): Promise<AccessPermission[]>;\n  revokeAccessPermission(id: string): Promise<void>;\n  getUserAccessibleRecords(userId: string): Promise<MedicalRecord[]>;\n\n  // Prescriptions\n  createPrescription(prescription: InsertPrescription): Promise<Prescription>;\n  getPrescriptions(filters: { doctorId?: string; patientId?: string }): Promise<Prescription[]>;\n  getPrescription(id: string): Promise<Prescription | undefined>;\n  updatePrescriptionStatus(id: string, status: string, dispensedById?: string): Promise<Prescription>;\n\n  // Prescription Items\n  createPrescriptionItems(items: InsertPrescriptionItem[]): Promise<PrescriptionItem[]>;\n  getPrescriptionItems(prescriptionId: string): Promise<PrescriptionItem[]>;\n\n  // Insurance Claims\n  createInsuranceClaim(claim: InsertInsuranceClaim): Promise<InsuranceClaim>;\n  getInsuranceClaims(filters: { patientId?: string; agentId?: string }): Promise<InsuranceClaim[]>;\n  getInsuranceClaim(id: string): Promise<InsuranceClaim | undefined>;\n  updateClaimStatus(id: string, status: string, reviewNotes?: string): Promise<InsuranceClaim>;\n\n  // Blockchain Transactions\n  getBlockchainTransactions(filters: { actorId?: string; resourceId?: string }): Promise<BlockchainTransaction[]>;\n\n  // Health Insights\n  createHealthInsight(insight: InsertHealthInsight): Promise<HealthInsight>;\n  getHealthInsights(patientId: string, unreadOnly?: boolean): Promise<HealthInsight[]>;\n  markInsightAsRead(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User operations\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db.insert(users).values(insertUser).returning();\n    return user;\n  }\n\n  // Medical Records\n  async createMedicalRecord(record: InsertMedicalRecord): Promise<MedicalRecord> {\n    const [medicalRecord] = await db.insert(medicalRecords).values(record).returning();\n    return medicalRecord;\n  }\n\n  async getMedicalRecords(patientId: string): Promise<MedicalRecord[]> {\n    return await db.select().from(medicalRecords).where(eq(medicalRecords.patientId, patientId));\n  }\n\n  async getMedicalRecord(id: string): Promise<MedicalRecord | undefined> {\n    const [record] = await db.select().from(medicalRecords).where(eq(medicalRecords.id, id));\n    return record || undefined;\n  }\n\n  // Access Permissions\n  async createAccessPermission(permission: InsertAccessPermission): Promise<AccessPermission> {\n    const [perm] = await db.insert(accessPermissions).values(permission).returning();\n    return perm;\n  }\n\n  async getAccessPermissions(recordId: string): Promise<AccessPermission[]> {\n    return await db\n      .select()\n      .from(accessPermissions)\n      .where(and(\n        eq(accessPermissions.recordId, recordId),\n        eq(accessPermissions.isActive, true)\n      ));\n  }\n\n  async revokeAccessPermission(id: string): Promise<void> {\n    await db\n      .update(accessPermissions)\n      .set({ isActive: false, revokedAt: new Date() })\n      .where(eq(accessPermissions.id, id));\n  }\n\n  async getUserAccessibleRecords(userId: string): Promise<MedicalRecord[]> {\n    const permissions = await db\n      .select()\n      .from(accessPermissions)\n      .where(and(\n        eq(accessPermissions.grantedToId, userId),\n        eq(accessPermissions.isActive, true)\n      ));\n\n    if (permissions.length === 0) return [];\n\n    const recordIds = permissions.map(p => p.recordId);\n    return await db\n      .select()\n      .from(medicalRecords)\n      .where(eq(medicalRecords.id, recordIds[0])); // Simplified for MVP\n  }\n\n  // Prescriptions\n  async createPrescription(prescription: InsertPrescription): Promise<Prescription> {\n    const [presc] = await db.insert(prescriptions).values(prescription).returning();\n    return presc;\n  }\n\n  async getPrescriptions(filters: { doctorId?: string; patientId?: string }): Promise<Prescription[]> {\n    let query = db.select().from(prescriptions);\n\n    if (filters.doctorId) {\n      return await query.where(eq(prescriptions.doctorId, filters.doctorId));\n    }\n    if (filters.patientId) {\n      return await query.where(eq(prescriptions.patientId, filters.patientId));\n    }\n\n    return await query;\n  }\n\n  async getPrescription(id: string): Promise<Prescription | undefined> {\n    const [presc] = await db.select().from(prescriptions).where(eq(prescriptions.id, id));\n    return presc || undefined;\n  }\n\n  async updatePrescriptionStatus(id: string, status: string, dispensedById?: string): Promise<Prescription> {\n    const updateData: any = { status };\n    if (status === 'dispensed' && dispensedById) {\n      updateData.dispensedById = dispensedById;\n      updateData.dispensedAt = new Date();\n    }\n\n    const [presc] = await db\n      .update(prescriptions)\n      .set(updateData)\n      .where(eq(prescriptions.id, id))\n      .returning();\n\n    return presc;\n  }\n\n  // Prescription Items\n  async createPrescriptionItems(items: InsertPrescriptionItem[]): Promise<PrescriptionItem[]> {\n    return await db.insert(prescriptionItems).values(items).returning();\n  }\n\n  async getPrescriptionItems(prescriptionId: string): Promise<PrescriptionItem[]> {\n    return await db\n      .select()\n      .from(prescriptionItems)\n      .where(eq(prescriptionItems.prescriptionId, prescriptionId));\n  }\n\n  // Insurance Claims\n  async createInsuranceClaim(claim: InsertInsuranceClaim): Promise<InsuranceClaim> {\n    const [insuranceClaim] = await db.insert(insuranceClaims).values(claim).returning();\n    return insuranceClaim;\n  }\n\n  async getInsuranceClaims(filters: { patientId?: string; agentId?: string }): Promise<InsuranceClaim[]> {\n    let query = db.select().from(insuranceClaims);\n\n    if (filters.patientId) {\n      return await query.where(eq(insuranceClaims.patientId, filters.patientId));\n    }\n    if (filters.agentId) {\n      return await query.where(eq(insuranceClaims.agentId, filters.agentId));\n    }\n\n    return await query;\n  }\n\n  async getInsuranceClaim(id: string): Promise<InsuranceClaim | undefined> {\n    const [claim] = await db.select().from(insuranceClaims).where(eq(insuranceClaims.id, id));\n    return claim || undefined;\n  }\n\n  async updateClaimStatus(id: string, status: string, reviewNotes?: string): Promise<InsuranceClaim> {\n    const updateData: any = { status, updatedAt: new Date() };\n    if (reviewNotes) {\n      updateData.reviewNotes = reviewNotes;\n    }\n\n    const [claim] = await db\n      .update(insuranceClaims)\n      .set(updateData)\n      .where(eq(insuranceClaims.id, id))\n      .returning();\n\n    return claim;\n  }\n\n  // Blockchain Transactions\n  async getBlockchainTransactions(filters: { actorId?: string; resourceId?: string }): Promise<BlockchainTransaction[]> {\n    let query = db.select().from(blockchainTransactions).orderBy(desc(blockchainTransactions.timestamp));\n\n    if (filters.actorId) {\n      return await query.where(eq(blockchainTransactions.actorId, filters.actorId));\n    }\n    if (filters.resourceId) {\n      return await query.where(eq(blockchainTransactions.resourceId, filters.resourceId));\n    }\n\n    return await query;\n  }\n\n  // Health Insights\n  async createHealthInsight(insight: InsertHealthInsight): Promise<HealthInsight> {\n    const [healthInsight] = await db.insert(healthInsights).values(insight).returning();\n    return healthInsight;\n  }\n\n  async getHealthInsights(patientId: string, unreadOnly?: boolean): Promise<HealthInsight[]> {\n    let query = db\n      .select()\n      .from(healthInsights)\n      .where(eq(healthInsights.patientId, patientId))\n      .orderBy(desc(healthInsights.createdAt));\n\n    if (unreadOnly) {\n      const results = await query;\n      return results.filter(i => !i.isRead);\n    }\n\n    return await query;\n  }\n\n  async markInsightAsRead(id: string): Promise<void> {\n    await db\n      .update(healthInsights)\n      .set({ isRead: true })\n      .where(eq(healthInsights.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9722},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { useTheme } from './theme-provider';\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n    >\n      {theme === 'light' ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":548},"client/src/App.tsx":{"content":"import { Switch, Route, Redirect } from 'wouter';\nimport { queryClient } from './lib/queryClient';\nimport { QueryClientProvider } from '@tanstack/react-query';\nimport { Toaster } from '@/components/ui/toaster';\nimport { TooltipProvider } from '@/components/ui/tooltip';\nimport { AuthProvider, useAuth } from './lib/auth-context';\nimport { ThemeProvider } from './components/theme-provider';\n\nimport NotFound from '@/pages/not-found';\nimport Landing from '@/pages/landing';\nimport Login from '@/pages/login';\nimport Register from '@/pages/register';\nimport PatientDashboard from '@/pages/patient-dashboard';\nimport PatientRecords from '@/pages/patient-records';\nimport PatientAccess from '@/pages/patient-access';\nimport PatientBlockchain from '@/pages/patient-blockchain';\nimport PatientInsights from '@/pages/patient-insights';\nimport DoctorDashboard from '@/pages/doctor-dashboard';\nimport DoctorPrescribe from '@/pages/doctor-prescribe';\nimport DoctorPrescriptions from '@/pages/doctor-prescriptions';\nimport DoctorPatients from '@/pages/doctor-patients';\nimport PharmacyDashboard from '@/pages/pharmacy-dashboard';\nimport PharmacyVerify from '@/pages/pharmacy-verify';\nimport PharmacyDispensed from '@/pages/pharmacy-dispensed';\nimport InsuranceDashboard from '@/pages/insurance-dashboard';\nimport InsurancePlans from '@/pages/insurance-plans';\nimport InsuranceSubmit from '@/pages/insurance-submit';\nimport InsuranceClaims from '@/pages/insurance-claims';\n\nfunction ProtectedRoute({ component: Component, role, ...rest }: any) {\n  const { isAuthenticated, user } = useAuth();\n  \n  if (!isAuthenticated) {\n    return <Redirect to=\"/login\" />;\n  }\n  \n  if (role && user?.role !== role) {\n    return <Redirect to=\"/\" />;\n  }\n  \n  return <Component {...rest} />;\n}\n\nfunction Router() {\n  const { isAuthenticated } = useAuth();\n  \n  return (\n    <Switch>\n      <Route path=\"/\" component={isAuthenticated ? () => <Redirect to={`/dashboard/${useAuth().user?.role}`} /> : Landing} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/register\" component={Register} />\n      \n      {/* Patient Routes */}\n      <Route path=\"/dashboard/patient\">\n        {() => <ProtectedRoute component={PatientDashboard} role=\"patient\" />}\n      </Route>\n      <Route path=\"/dashboard/patient/records\">\n        {() => <ProtectedRoute component={PatientRecords} role=\"patient\" />}\n      </Route>\n      <Route path=\"/dashboard/patient/access\">\n        {() => <ProtectedRoute component={PatientAccess} role=\"patient\" />}\n      </Route>\n      <Route path=\"/dashboard/patient/insights\">\n        {() => <ProtectedRoute component={PatientInsights} role=\"patient\" />}\n      </Route>\n      <Route path=\"/dashboard/patient/blockchain\">\n        {() => <ProtectedRoute component={PatientBlockchain} role=\"patient\" />}\n      </Route>\n      \n      {/* Doctor Routes */}\n      <Route path=\"/dashboard/doctor\">\n        {() => <ProtectedRoute component={DoctorDashboard} role=\"doctor\" />}\n      </Route>\n      <Route path=\"/dashboard/doctor/prescribe\">\n        {() => <ProtectedRoute component={DoctorPrescribe} role=\"doctor\" />}\n      </Route>\n      <Route path=\"/dashboard/doctor/prescriptions\">\n        {() => <ProtectedRoute component={DoctorPrescriptions} role=\"doctor\" />}\n      </Route>\n      <Route path=\"/dashboard/doctor/patients\">\n        {() => <ProtectedRoute component={DoctorPatients} role=\"doctor\" />}\n      </Route>\n      \n      {/* Pharmacy Routes */}\n      <Route path=\"/dashboard/pharmacy\">\n        {() => <ProtectedRoute component={PharmacyDashboard} role=\"pharmacy\" />}\n      </Route>\n      <Route path=\"/dashboard/pharmacy/verify\">\n        {() => <ProtectedRoute component={PharmacyVerify} role=\"pharmacy\" />}\n      </Route>\n      <Route path=\"/dashboard/pharmacy/dispensed\">\n        {() => <ProtectedRoute component={PharmacyDispensed} role=\"pharmacy\" />}\n      </Route>\n      \n      {/* Insurance Routes */}\n      <Route path=\"/dashboard/insurance\">\n        {() => <ProtectedRoute component={InsuranceDashboard} role=\"insurance\" />}\n      </Route>\n      <Route path=\"/dashboard/insurance/plans\">\n        {() => <ProtectedRoute component={InsurancePlans} role=\"insurance\" />}\n      </Route>\n      <Route path=\"/dashboard/insurance/submit\">\n        {() => <ProtectedRoute component={InsuranceSubmit} role=\"insurance\" />}\n      </Route>\n      <Route path=\"/dashboard/insurance/claims\">\n        {() => <ProtectedRoute component={InsuranceClaims} role=\"insurance\" />}\n      </Route>\n      \n      {/* Fallback to 404 */}\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <TooltipProvider>\n            <Toaster />\n            <Router />\n          </TooltipProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":4906},"client/src/pages/doctor-patients.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Users, FileText } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Badge } from '@/components/ui/badge';\n\nexport default function DoctorPatients() {\n  const { data: prescriptions, isLoading } = useQuery({\n    queryKey: ['/api/prescriptions'],\n  });\n\n  // Extract unique patients from prescriptions\n  const patients = prescriptions ? Array.from(\n    new Map(\n      prescriptions.map((p: any) => [p.patientId, p])\n    ).values()\n  ) : [];\n\n  const getPrescriptionCount = (patientId: string) => {\n    return prescriptions?.filter((p: any) => p.patientId === patientId).length || 0;\n  };\n\n  return (\n    <DashboardLayout role=\"doctor\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">My Patients</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Patients you've prescribed medications to\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            {[...Array(6)].map((_, i) => (\n              <Skeleton key={i} className=\"h-32\" />\n            ))}\n          </div>\n        ) : patients.length > 0 ? (\n          <div className=\"grid gap-4 md:grid-cols-3\">\n            {patients.map((patient: any) => (\n              <Card key={patient.patientId} data-testid={`patient-${patient.patientId}`}>\n                <CardHeader>\n                  <CardTitle className=\"text-base\">Patient</CardTitle>\n                  <CardDescription className=\"font-mono text-xs\">\n                    ID: {patient.patientId.slice(0, 12)}...\n                  </CardDescription>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"flex items-center justify-between\">\n                    <span className=\"text-sm text-muted-foreground\">Prescriptions:</span>\n                    <Badge variant=\"secondary\">\n                      <FileText className=\"mr-1 h-3 w-3\" />\n                      {getPrescriptionCount(patient.patientId)}\n                    </Badge>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <Users className=\"h-16 w-16 text-muted-foreground/50\" />\n              <h3 className=\"mt-4 font-serif text-xl font-semibold\">No patients yet</h3>\n              <p className=\"mt-2 text-center text-sm text-muted-foreground\">\n                Patients will appear here once you create prescriptions for them\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":2926},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/pages/insurance-submit.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { FileText } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useLocation } from 'wouter';\n\nexport default function InsuranceSubmit() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [claim, setClaim] = useState({\n    policyNumber: '',\n    policyProvider: '',\n    claimAmount: '',\n    claimType: 'hospitalization',\n    description: '',\n  });\n\n  const submitClaimMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/claims', {\n        ...data,\n        claimAmount: parseInt(data.claimAmount),\n      });\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Claim Submitted',\n        description: 'Your insurance claim has been recorded on blockchain',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/claims'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/insurance/stats'] });\n      setLocation('/dashboard/insurance/claims');\n    },\n    onError: () => {\n      toast({\n        variant: 'destructive',\n        title: 'Submission Failed',\n        description: 'Please try again',\n      });\n    },\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitClaimMutation.mutate(claim);\n  };\n\n  return (\n    <DashboardLayout role=\"insurance\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">Submit Insurance Claim</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            File a new claim with blockchain verification\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-serif\">Policy Information</CardTitle>\n              <CardDescription>Enter your insurance policy details</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div className=\"grid gap-4 md:grid-cols-2\">\n                <div>\n                  <Label htmlFor=\"policyNumber\">Policy Number</Label>\n                  <Input\n                    id=\"policyNumber\"\n                    value={claim.policyNumber}\n                    onChange={(e) => setClaim({ ...claim, policyNumber: e.target.value })}\n                    placeholder=\"e.g., POL-2024-123456\"\n                    required\n                    data-testid=\"input-policy-number\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"policyProvider\">Insurance Provider</Label>\n                  <Input\n                    id=\"policyProvider\"\n                    value={claim.policyProvider}\n                    onChange={(e) => setClaim({ ...claim, policyProvider: e.target.value })}\n                    placeholder=\"e.g., HealthCare Insurance Co.\"\n                    required\n                    data-testid=\"input-provider\"\n                  />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-serif\">Claim Details</CardTitle>\n              <CardDescription>Provide information about your claim</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"claimType\">Claim Type</Label>\n                <Select\n                  value={claim.claimType}\n                  onValueChange={(value) => setClaim({ ...claim, claimType: value })}\n                >\n                  <SelectTrigger data-testid=\"select-claim-type\">\n                    <SelectValue />\n                  </SelectTrigger>\n                  <SelectContent>\n                    <SelectItem value=\"hospitalization\">Hospitalization</SelectItem>\n                    <SelectItem value=\"outpatient\">Outpatient</SelectItem>\n                    <SelectItem value=\"pharmacy\">Pharmacy</SelectItem>\n                    <SelectItem value=\"dental\">Dental</SelectItem>\n                    <SelectItem value=\"vision\">Vision</SelectItem>\n                    <SelectItem value=\"other\">Other</SelectItem>\n                  </SelectContent>\n                </Select>\n              </div>\n\n              <div>\n                <Label htmlFor=\"claimAmount\">Claim Amount ($)</Label>\n                <Input\n                  id=\"claimAmount\"\n                  type=\"number\"\n                  value={claim.claimAmount}\n                  onChange={(e) => setClaim({ ...claim, claimAmount: e.target.value })}\n                  placeholder=\"e.g., 5000\"\n                  required\n                  data-testid=\"input-amount\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"description\">Description</Label>\n                <Textarea\n                  id=\"description\"\n                  value={claim.description}\n                  onChange={(e) => setClaim({ ...claim, description: e.target.value })}\n                  placeholder=\"Describe the medical service or treatment\"\n                  required\n                  rows={4}\n                  data-testid=\"textarea-description\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => setLocation('/dashboard/insurance')}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={submitClaimMutation.isPending} data-testid=\"button-submit-claim\">\n              {submitClaimMutation.isPending ? 'Submitting...' : (\n                <>\n                  <FileText className=\"mr-2 h-4 w-4\" />\n                  Submit Claim\n                </>\n              )}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":6491},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/pages/pharmacy-dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { Shield, Pill, CheckCircle, TrendingUp } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { useAuth } from '@/lib/auth-context';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { useLocation } from 'wouter';\n\nexport default function PharmacyDashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/pharmacy/stats'],\n  });\n\n  if (isLoading) {\n    return (\n      <DashboardLayout role=\"pharmacy\">\n        <div className=\"space-y-6\">\n          <div>\n            <Skeleton className=\"h-8 w-64\" />\n            <Skeleton className=\"mt-2 h-4 w-96\" />\n          </div>\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n            {[...Array(3)].map((_, i) => (\n              <Skeleton key={i} className=\"h-32\" />\n            ))}\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  const statsData = stats || {\n    verifiedPrescriptions: 0,\n    dispensedToday: 0,\n    totalDispensed: 0,\n  };\n\n  return (\n    <DashboardLayout role=\"pharmacy\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">{user?.fullName}</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Verify and dispense blockchain-authenticated prescriptions\n          </p>\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-3\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Verified Today</CardTitle>\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-verified\">\n                {statsData.verifiedPrescriptions}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Blockchain verified</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Dispensed Today</CardTitle>\n              <Pill className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-dispensed-today\">\n                {statsData.dispensedToday}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Medications provided</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Dispensed</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-total-dispensed\">\n                {statsData.totalDispensed}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">All time</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"font-serif\">Pharmacy Workflow</CardTitle>\n            <CardDescription>Prescription verification and dispensing</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <button\n              className=\"flex w-full items-center gap-3 rounded-md border p-4 text-left transition-colors hover-elevate active-elevate-2\"\n              onClick={() => setLocation('/dashboard/pharmacy/verify')}\n              data-testid=\"button-verify-prescription\"\n            >\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-chart-5/10\">\n                <Shield className=\"h-5 w-5 text-chart-5\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium\">Verify Prescription</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Scan QR code or enter prescription ID\n                </p>\n              </div>\n            </button>\n\n            <button\n              className=\"flex w-full items-center gap-3 rounded-md border p-4 text-left transition-colors hover-elevate active-elevate-2\"\n              onClick={() => setLocation('/dashboard/pharmacy/dispensed')}\n              data-testid=\"button-dispensed-records\"\n            >\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-chart-2/10\">\n                <Pill className=\"h-5 w-5 text-chart-2\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium\">Dispensed Records</p>\n                <p className=\"text-sm text-muted-foreground\">View dispensing history</p>\n              </div>\n            </button>\n          </CardContent>\n        </Card>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"font-serif\">How Verification Works</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div className=\"flex gap-3\">\n                <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-primary/10 text-sm font-semibold text-primary\">\n                  1\n                </div>\n                <div>\n                  <p className=\"font-medium\">Scan or Enter Prescription ID</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Patient provides prescription from their doctor\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex gap-3\">\n                <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-primary/10 text-sm font-semibold text-primary\">\n                  2\n                </div>\n                <div>\n                  <p className=\"font-medium\">Blockchain Verification</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    System validates prescription authenticity via blockchain hash\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"flex gap-3\">\n                <div className=\"flex h-8 w-8 items-center justify-center rounded-full bg-primary/10 text-sm font-semibold text-primary\">\n                  3\n                </div>\n                <div>\n                  <p className=\"font-medium\">Dispense and Record</p>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Mark as dispensed - transaction logged on blockchain\n                  </p>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7090},"client/src/pages/patient-dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { FileText, Shield, Activity, Upload, TrendingUp } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { useAuth } from '@/lib/auth-context';\nimport { Skeleton } from '@/components/ui/skeleton';\n\nexport default function PatientDashboard() {\n  const { user } = useAuth();\n\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/patient/stats'],\n  });\n\n  if (isLoading) {\n    return (\n      <DashboardLayout role=\"patient\">\n        <div className=\"space-y-6\">\n          <div>\n            <Skeleton className=\"h-8 w-64\" />\n            <Skeleton className=\"mt-2 h-4 w-96\" />\n          </div>\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n            {[...Array(4)].map((_, i) => (\n              <Skeleton key={i} className=\"h-32\" />\n            ))}\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  const statsData = stats || {\n    totalRecords: 0,\n    sharedRecords: 0,\n    totalInsights: 0,\n    blockchainTransactions: 0,\n  };\n\n  return (\n    <DashboardLayout role=\"patient\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">Welcome, {user?.fullName}</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Manage your medical records and control who has access\n          </p>\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Medical Records</CardTitle>\n              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-total-records\">\n                {statsData.totalRecords}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Total uploaded files</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Shared Access</CardTitle>\n              <Shield className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-shared-records\">\n                {statsData.sharedRecords}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Active permissions</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Health Insights</CardTitle>\n              <Activity className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-insights\">\n                {statsData.totalInsights}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">AI-generated alerts</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Blockchain Log</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-transactions\">\n                {statsData.blockchainTransactions}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Verified transactions</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <div className=\"grid gap-6 lg:grid-cols-2\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-serif\">Quick Actions</CardTitle>\n              <CardDescription>Common tasks for managing your health data</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <button\n                className=\"flex w-full items-center gap-3 rounded-md border p-4 text-left transition-colors hover-elevate active-elevate-2\"\n                data-testid=\"button-upload-record\"\n              >\n                <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10\">\n                  <Upload className=\"h-5 w-5 text-primary\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium\">Upload Medical Record</p>\n                  <p className=\"text-sm text-muted-foreground\">Add new lab reports or documents</p>\n                </div>\n              </button>\n\n              <button\n                className=\"flex w-full items-center gap-3 rounded-md border p-4 text-left transition-colors hover-elevate active-elevate-2\"\n                data-testid=\"button-manage-access\"\n              >\n                <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-chart-2/10\">\n                  <Shield className=\"h-5 w-5 text-chart-2\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium\">Manage Access</p>\n                  <p className=\"text-sm text-muted-foreground\">Grant or revoke permissions</p>\n                </div>\n              </button>\n\n              <button\n                className=\"flex w-full items-center gap-3 rounded-md border p-4 text-left transition-colors hover-elevate active-elevate-2\"\n                data-testid=\"button-view-insights\"\n              >\n                <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-chart-4/10\">\n                  <Activity className=\"h-5 w-5 text-chart-4\" />\n                </div>\n                <div className=\"flex-1\">\n                  <p className=\"font-medium\">View Health Insights</p>\n                  <p className=\"text-sm text-muted-foreground\">AI-powered health analysis</p>\n                </div>\n              </button>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-serif\">Recent Activity</CardTitle>\n              <CardDescription>Latest blockchain transactions</CardDescription>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-3\">\n                {statsData.blockchainTransactions === 0 ? (\n                  <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n                    <Shield className=\"h-12 w-12 text-muted-foreground/50\" />\n                    <p className=\"mt-3 text-sm font-medium\">No transactions yet</p>\n                    <p className=\"text-xs text-muted-foreground\">\n                      Your blockchain activity will appear here\n                    </p>\n                  </div>\n                ) : (\n                  <p className=\"text-sm text-muted-foreground\">\n                    View detailed transaction history in the Blockchain Log section\n                  </p>\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":7488},"server/blockchain.ts":{"content":"import { createHash, randomBytes } from 'crypto';\nimport { db } from './db';\nimport { blockchainTransactions, insertBlockchainTransactionSchema } from '@shared/schema';\nimport { desc } from 'drizzle-orm';\n\nexport class BlockchainService {\n  /**\n   * Creates a cryptographic hash for blockchain verification\n   */\n  private static createHash(data: any): string {\n    const hash = createHash('sha256');\n    hash.update(JSON.stringify(data) + randomBytes(16).toString('hex'));\n    return hash.digest('hex');\n  }\n\n  /**\n   * Get the latest blockchain transaction to link the chain\n   */\n  private static async getLatestTransaction() {\n    const [latest] = await db\n      .select()\n      .from(blockchainTransactions)\n      .orderBy(desc(blockchainTransactions.timestamp))\n      .limit(1);\n    \n    return latest;\n  }\n\n  /**\n   * Record a blockchain transaction (immutable log)\n   */\n  static async recordTransaction(\n    actorId: string,\n    actionType: string,\n    resourceType: string,\n    resourceId: string,\n    metadata: Record<string, any> = {}\n  ) {\n    const latest = await this.getLatestTransaction();\n    const previousHash = latest?.transactionHash || 'genesis';\n\n    const transactionData = {\n      actorId,\n      actionType,\n      resourceType,\n      resourceId,\n      metadata,\n      previousHash,\n      timestamp: new Date(),\n    };\n\n    const transactionHash = this.createHash(transactionData);\n\n    const [transaction] = await db\n      .insert(blockchainTransactions)\n      .values({\n        transactionHash,\n        actorId,\n        actionType,\n        resourceType,\n        resourceId,\n        metadata,\n        previousHash,\n      })\n      .returning();\n\n    return transaction;\n  }\n\n  /**\n   * Create a blockchain hash for a resource (prescriptions, claims, etc.)\n   */\n  static createResourceHash(resourceData: any): string {\n    return this.createHash(resourceData);\n  }\n\n  /**\n   * Verify blockchain chain integrity\n   */\n  static async verifyChainIntegrity(): Promise<boolean> {\n    const transactions = await db\n      .select()\n      .from(blockchainTransactions)\n      .orderBy(blockchainTransactions.timestamp);\n\n    for (let i = 1; i < transactions.length; i++) {\n      const current = transactions[i];\n      const previous = transactions[i - 1];\n\n      if (current.previousHash !== previous.transactionHash) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n}\n","size_bytes":2396},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/insurance-plans.tsx":{"content":"import { ExternalLink, FileHeart } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\n\nexport default function InsurancePlans() {\n  return (\n    <DashboardLayout role=\"insurance\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">Find Best Insurance Plans</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Compare and purchase health insurance policies\n          </p>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <div className=\"flex items-center gap-2\">\n              <FileHeart className=\"h-6 w-6 text-chart-4\" />\n              <CardTitle className=\"font-serif\">PolicyBazaar Integration</CardTitle>\n            </div>\n            <CardDescription>\n              Browse comprehensive health insurance plans from top providers\n            </CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            <p className=\"text-sm text-muted-foreground\">\n              PolicyBazaar offers a wide selection of health insurance plans. Compare coverage,\n              premiums, network hospitals, and benefits to find the perfect plan for you and your family.\n            </p>\n\n            <div className=\"space-y-2\">\n              <h4 className=\"font-medium\">Features:</h4>\n              <ul className=\"list-disc list-inside space-y-1 text-sm text-muted-foreground\">\n                <li>Compare 40+ insurance providers</li>\n                <li>Instant policy quotes</li>\n                <li>Network hospital finder</li>\n                <li>Expert advice and support</li>\n                <li>Easy claim process guidance</li>\n              </ul>\n            </div>\n\n            <Button\n              className=\"w-full\"\n              onClick={() => window.open('https://www.policybazaar.com/health-insurance/', '_blank')}\n              data-testid=\"button-policybazaar\"\n            >\n              <ExternalLink className=\"mr-2 h-4 w-4\" />\n              Browse Plans on PolicyBazaar\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":2292},"client/src/pages/patient-access.tsx":{"content":"import { useState } from 'react';\nimport { useQuery, useMutation } from '@tanstack/react-query';\nimport { Shield, Plus, X, FileText } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Badge } from '@/components/ui/badge';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';\n\nexport default function PatientAccess() {\n  const { toast } = useToast();\n  const { data: records, isLoading: recordsLoading } = useQuery({\n    queryKey: ['/api/medical-records'],\n  });\n  \n  const { data: permissions, isLoading: permissionsLoading } = useQuery({\n    queryKey: ['/api/access-permissions'],\n  });\n  \n  const [selectedRecord, setSelectedRecord] = useState<any>(null);\n  const [grantedToId, setGrantedToId] = useState('');\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\n\n  const grantAccessMutation = useMutation({\n    mutationFn: async (data: { recordId: string; grantedToId: string }) => {\n      return await apiRequest('POST', '/api/access-permissions', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Access Granted',\n        description: 'Permission recorded on blockchain',\n      });\n      setIsDialogOpen(false);\n      setGrantedToId('');\n      queryClient.invalidateQueries({ queryKey: ['/api/access-permissions'] });\n    },\n    onError: () => {\n      toast({\n        variant: 'destructive',\n        title: 'Failed to grant access',\n        description: 'Please try again',\n      });\n    },\n  });\n\n  const revokeAccessMutation = useMutation({\n    mutationFn: async (permissionId: string) => {\n      return await apiRequest('DELETE', `/api/access-permissions/${permissionId}`, {});\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Access Revoked',\n        description: 'Permission revoked and logged on blockchain',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/access-permissions'] });\n    },\n    onError: () => {\n      toast({\n        variant: 'destructive',\n        title: 'Failed to revoke access',\n        description: 'Please try again',\n      });\n    },\n  });\n\n  const handleGrantAccess = () => {\n    if (selectedRecord && grantedToId) {\n      grantAccessMutation.mutate({\n        recordId: selectedRecord.id,\n        grantedToId,\n      });\n    }\n  };\n\n  const getPermissionsForRecord = (recordId: string) => {\n    return permissions?.filter((p: any) => p.recordId === recordId) || [];\n  };\n\n  const isLoading = recordsLoading || permissionsLoading;\n\n  return (\n    <DashboardLayout role=\"patient\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">Access Control</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Manage who can access your medical records with blockchain verification\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {[...Array(4)].map((_, i) => (\n              <Skeleton key={i} className=\"h-48\" />\n            ))}\n          </div>\n        ) : records && records.length > 0 ? (\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {records.map((record: any) => {\n              const recordPermissions = getPermissionsForRecord(record.id);\n              \n              return (\n                <Card key={record.id} data-testid={`record-${record.id}`}>\n                  <CardHeader>\n                    <div className=\"flex items-start justify-between\">\n                      <div className=\"flex-1\">\n                        <CardTitle className=\"text-base\">{record.title}</CardTitle>\n                        <CardDescription className=\"capitalize\">\n                          {record.recordType.replace('_', ' ')}\n                        </CardDescription>\n                      </div>\n                      <Badge variant=\"outline\">\n                        <Shield className=\"mr-1 h-3 w-3\" />\n                        {recordPermissions.length} Access{recordPermissions.length !== 1 ? 'es' : ''}\n                      </Badge>\n                    </div>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    {record.description && (\n                      <p className=\"text-sm text-muted-foreground line-clamp-2\">\n                        {record.description}\n                      </p>\n                    )}\n\n                    {recordPermissions.length > 0 && (\n                      <div className=\"space-y-2\">\n                        <p className=\"text-sm font-medium\">Granted To:</p>\n                        <div className=\"space-y-2\">\n                          {recordPermissions.map((perm: any) => (\n                            <div key={perm.id} className=\"flex items-center justify-between rounded-md border p-2\">\n                              <code className=\"text-xs font-mono\">{perm.grantedToId.slice(0, 12)}...</code>\n                              <Button\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                onClick={() => revokeAccessMutation.mutate(perm.id)}\n                                disabled={revokeAccessMutation.isPending}\n                                data-testid={`button-revoke-${perm.id}`}\n                              >\n                                <X className=\"h-4 w-4\" />\n                              </Button>\n                            </div>\n                          ))}\n                        </div>\n                      </div>\n                    )}\n\n                    <Dialog open={isDialogOpen && selectedRecord?.id === record.id} onOpenChange={(open) => {\n                      setIsDialogOpen(open);\n                      if (open) setSelectedRecord(record);\n                      else setGrantedToId('');\n                    }}>\n                      <DialogTrigger asChild>\n                        <Button variant=\"outline\" size=\"sm\" className=\"w-full\" data-testid={`button-grant-access-${record.id}`}>\n                          <Plus className=\"mr-2 h-4 w-4\" />\n                          Grant Access\n                        </Button>\n                      </DialogTrigger>\n                      <DialogContent>\n                        <DialogHeader>\n                          <DialogTitle>Grant Access to {record.title}</DialogTitle>\n                          <DialogDescription>\n                            Allow a healthcare provider to view this record\n                          </DialogDescription>\n                        </DialogHeader>\n                        <div className=\"space-y-4 pt-4\">\n                          <div>\n                            <Label htmlFor=\"grantedToId\">Provider ID (Doctor/Pharmacy/Insurance)</Label>\n                            <Input\n                              id=\"grantedToId\"\n                              value={grantedToId}\n                              onChange={(e) => setGrantedToId(e.target.value)}\n                              placeholder=\"Enter provider user ID\"\n                              data-testid=\"input-provider-id\"\n                            />\n                          </div>\n                          <Button \n                            onClick={handleGrantAccess} \n                            disabled={grantAccessMutation.isPending || !grantedToId}\n                            className=\"w-full\"\n                            data-testid=\"button-confirm-grant\"\n                          >\n                            {grantAccessMutation.isPending ? 'Granting...' : 'Grant Access'}\n                          </Button>\n                        </div>\n                      </DialogContent>\n                    </Dialog>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <FileText className=\"h-16 w-16 text-muted-foreground/50\" />\n              <h3 className=\"mt-4 font-serif text-xl font-semibold\">No medical records yet</h3>\n              <p className=\"mt-2 text-sm text-muted-foreground\">\n                Upload medical records to manage access control\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":8767},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/pages/doctor-prescribe.tsx":{"content":"import { useState } from 'react';\nimport { useMutation } from '@tanstack/react-query';\nimport { FileText, Plus, X } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea';\nimport { useToast } from '@/hooks/use-toast';\nimport { apiRequest, queryClient } from '@/lib/queryClient';\nimport { useLocation } from 'wouter';\n\ninterface Medication {\n  medicationName: string;\n  dosage: string;\n  frequency: string;\n  duration: string;\n  instructions: string;\n}\n\nexport default function DoctorPrescribe() {\n  const { toast } = useToast();\n  const [, setLocation] = useLocation();\n  const [prescription, setPrescription] = useState({\n    patientId: '',\n    diagnosis: '',\n    notes: '',\n  });\n  const [medications, setMedications] = useState<Medication[]>([\n    { medicationName: '', dosage: '', frequency: '', duration: '', instructions: '' },\n  ]);\n\n  const createPrescriptionMutation = useMutation({\n    mutationFn: async (data: any) => {\n      return await apiRequest('POST', '/api/prescriptions', data);\n    },\n    onSuccess: () => {\n      toast({\n        title: 'Prescription created',\n        description: 'E-prescription has been verified on blockchain',\n      });\n      queryClient.invalidateQueries({ queryKey: ['/api/prescriptions'] });\n      queryClient.invalidateQueries({ queryKey: ['/api/doctor/stats'] });\n      setLocation('/dashboard/doctor/prescriptions');\n    },\n    onError: () => {\n      toast({\n        variant: 'destructive',\n        title: 'Failed to create prescription',\n        description: 'Please try again',\n      });\n    },\n  });\n\n  const addMedication = () => {\n    setMedications([...medications, { medicationName: '', dosage: '', frequency: '', duration: '', instructions: '' }]);\n  };\n\n  const removeMedication = (index: number) => {\n    setMedications(medications.filter((_, i) => i !== index));\n  };\n\n  const updateMedication = (index: number, field: keyof Medication, value: string) => {\n    const updated = [...medications];\n    updated[index] = { ...updated[index], [field]: value };\n    setMedications(updated);\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    createPrescriptionMutation.mutate({ prescription, medications });\n  };\n\n  return (\n    <DashboardLayout role=\"doctor\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">Create E-Prescription</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Write a blockchain-verified digital prescription\n          </p>\n        </div>\n\n        <form onSubmit={handleSubmit} className=\"space-y-6\">\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"font-serif\">Patient Information</CardTitle>\n              <CardDescription>Enter patient ID and diagnosis</CardDescription>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"patientId\">Patient ID</Label>\n                <Input\n                  id=\"patientId\"\n                  value={prescription.patientId}\n                  onChange={(e) => setPrescription({ ...prescription, patientId: e.target.value })}\n                  placeholder=\"Enter patient ID\"\n                  required\n                  data-testid=\"input-patient-id\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"diagnosis\">Diagnosis</Label>\n                <Input\n                  id=\"diagnosis\"\n                  value={prescription.diagnosis}\n                  onChange={(e) => setPrescription({ ...prescription, diagnosis: e.target.value })}\n                  placeholder=\"e.g., Hypertension, Type 2 Diabetes\"\n                  required\n                  data-testid=\"input-diagnosis\"\n                />\n              </div>\n\n              <div>\n                <Label htmlFor=\"notes\">Clinical Notes (Optional)</Label>\n                <Textarea\n                  id=\"notes\"\n                  value={prescription.notes}\n                  onChange={(e) => setPrescription({ ...prescription, notes: e.target.value })}\n                  placeholder=\"Additional notes or instructions\"\n                  data-testid=\"textarea-notes\"\n                />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader>\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <CardTitle className=\"font-serif\">Medications</CardTitle>\n                  <CardDescription>Add prescribed medications</CardDescription>\n                </div>\n                <Button type=\"button\" variant=\"outline\" size=\"sm\" onClick={addMedication} data-testid=\"button-add-medication\">\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  Add Medication\n                </Button>\n              </div>\n            </CardHeader>\n            <CardContent className=\"space-y-6\">\n              {medications.map((med, index) => (\n                <div key={index} className=\"rounded-md border p-4\">\n                  <div className=\"mb-4 flex items-center justify-between\">\n                    <h4 className=\"font-medium\">Medication {index + 1}</h4>\n                    {medications.length > 1 && (\n                      <Button\n                        type=\"button\"\n                        variant=\"ghost\"\n                        size=\"sm\"\n                        onClick={() => removeMedication(index)}\n                        data-testid={`button-remove-medication-${index}`}\n                      >\n                        <X className=\"h-4 w-4\" />\n                      </Button>\n                    )}\n                  </div>\n\n                  <div className=\"grid gap-4 md:grid-cols-2\">\n                    <div>\n                      <Label>Medication Name</Label>\n                      <Input\n                        value={med.medicationName}\n                        onChange={(e) => updateMedication(index, 'medicationName', e.target.value)}\n                        placeholder=\"e.g., Lisinopril\"\n                        required\n                        data-testid={`input-medication-name-${index}`}\n                      />\n                    </div>\n\n                    <div>\n                      <Label>Dosage</Label>\n                      <Input\n                        value={med.dosage}\n                        onChange={(e) => updateMedication(index, 'dosage', e.target.value)}\n                        placeholder=\"e.g., 10mg\"\n                        required\n                        data-testid={`input-dosage-${index}`}\n                      />\n                    </div>\n\n                    <div>\n                      <Label>Frequency</Label>\n                      <Input\n                        value={med.frequency}\n                        onChange={(e) => updateMedication(index, 'frequency', e.target.value)}\n                        placeholder=\"e.g., Once daily\"\n                        required\n                        data-testid={`input-frequency-${index}`}\n                      />\n                    </div>\n\n                    <div>\n                      <Label>Duration</Label>\n                      <Input\n                        value={med.duration}\n                        onChange={(e) => updateMedication(index, 'duration', e.target.value)}\n                        placeholder=\"e.g., 30 days\"\n                        required\n                        data-testid={`input-duration-${index}`}\n                      />\n                    </div>\n\n                    <div className=\"md:col-span-2\">\n                      <Label>Instructions</Label>\n                      <Textarea\n                        value={med.instructions}\n                        onChange={(e) => updateMedication(index, 'instructions', e.target.value)}\n                        placeholder=\"e.g., Take with food\"\n                        data-testid={`textarea-instructions-${index}`}\n                      />\n                    </div>\n                  </div>\n                </div>\n              ))}\n            </CardContent>\n          </Card>\n\n          <div className=\"flex justify-end gap-2\">\n            <Button type=\"button\" variant=\"outline\" onClick={() => setLocation('/dashboard/doctor')}>\n              Cancel\n            </Button>\n            <Button type=\"submit\" disabled={createPrescriptionMutation.isPending} data-testid=\"button-submit-prescription\">\n              {createPrescriptionMutation.isPending ? 'Creating...' : 'Create Prescription'}\n            </Button>\n          </div>\n        </form>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":8927},"server/health-insights.ts":{"content":"import { db } from './db';\nimport { healthInsights, medicalRecords } from '@shared/schema';\n\ninterface HealthData {\n  bloodPressureSystolic?: number;\n  bloodPressureDiastolic?: number;\n  bloodGlucose?: number;\n  cholesterolTotal?: number;\n  cholesterolLDL?: number;\n  heartRate?: number;\n  temperature?: number;\n  weight?: number;\n  height?: number;\n}\n\nexport class HealthInsightsAnalyzer {\n  /**\n   * Parse health data from file description or metadata\n   * In a real system, this would use OCR/NLP on uploaded files\n   */\n  private static parseHealthData(description: string): HealthData {\n    const data: HealthData = {};\n    \n    // Simple regex-based extraction (MVP - rule-based)\n    const bpMatch = description.match(/BP:?\\s*(\\d+)\\/(\\d+)/i) || \n                   description.match(/blood pressure:?\\s*(\\d+)\\/(\\d+)/i);\n    if (bpMatch) {\n      data.bloodPressureSystolic = parseInt(bpMatch[1]);\n      data.bloodPressureDiastolic = parseInt(bpMatch[2]);\n    }\n\n    const glucoseMatch = description.match(/glucose:?\\s*(\\d+)/i) ||\n                        description.match(/blood sugar:?\\s*(\\d+)/i);\n    if (glucoseMatch) {\n      data.bloodGlucose = parseInt(glucoseMatch[1]);\n    }\n\n    const cholMatch = description.match(/cholesterol:?\\s*(\\d+)/i);\n    if (cholMatch) {\n      data.cholesterolTotal = parseInt(cholMatch[1]);\n    }\n\n    return data;\n  }\n\n  /**\n   * Analyze health data and generate insights\n   */\n  static async analyzeRecord(recordId: string, patientId: string, description: string) {\n    const healthData = this.parseHealthData(description);\n    const insights: Array<{\n      type: string;\n      severity: string;\n      title: string;\n      description: string;\n      recommendations: string;\n    }> = [];\n\n    // Blood Pressure Analysis\n    if (healthData.bloodPressureSystolic && healthData.bloodPressureDiastolic) {\n      if (healthData.bloodPressureSystolic >= 140 || healthData.bloodPressureDiastolic >= 90) {\n        insights.push({\n          type: 'alert',\n          severity: 'high',\n          title: 'Elevated Blood Pressure Detected',\n          description: `Your blood pressure reading of ${healthData.bloodPressureSystolic}/${healthData.bloodPressureDiastolic} mmHg is above the normal range (120/80 mmHg).`,\n          recommendations: 'Consult with your healthcare provider. Consider lifestyle modifications including reduced sodium intake, regular exercise, and stress management.',\n        });\n      } else if (healthData.bloodPressureSystolic >= 120 || healthData.bloodPressureDiastolic >= 80) {\n        insights.push({\n          type: 'recommendation',\n          severity: 'medium',\n          title: 'Pre-Hypertension Range',\n          description: `Your blood pressure of ${healthData.bloodPressureSystolic}/${healthData.bloodPressureDiastolic} mmHg is in the pre-hypertension range.`,\n          recommendations: 'Monitor your blood pressure regularly. Maintain a healthy diet and exercise routine.',\n        });\n      }\n    }\n\n    // Blood Glucose Analysis\n    if (healthData.bloodGlucose) {\n      if (healthData.bloodGlucose > 180) {\n        insights.push({\n          type: 'alert',\n          severity: 'high',\n          title: 'High Blood Sugar Level',\n          description: `Blood glucose level of ${healthData.bloodGlucose} mg/dL is significantly elevated (normal: 70-140 mg/dL).`,\n          recommendations: 'Immediate consultation with your doctor is recommended. Monitor your diet and consider diabetes screening.',\n        });\n      } else if (healthData.bloodGlucose > 140) {\n        insights.push({\n          type: 'recommendation',\n          severity: 'medium',\n          title: 'Elevated Blood Sugar',\n          description: `Blood glucose of ${healthData.bloodGlucose} mg/dL is above normal range.`,\n          recommendations: 'Consider reducing sugar intake and increasing physical activity. Schedule a follow-up test.',\n        });\n      } else if (healthData.bloodGlucose < 70) {\n        insights.push({\n          type: 'alert',\n          severity: 'medium',\n          title: 'Low Blood Sugar',\n          description: `Blood glucose of ${healthData.bloodGlucose} mg/dL is below normal range.`,\n          recommendations: 'Ensure regular meal times and adequate carbohydrate intake. Consult your healthcare provider.',\n        });\n      }\n    }\n\n    // Cholesterol Analysis\n    if (healthData.cholesterolTotal) {\n      if (healthData.cholesterolTotal > 240) {\n        insights.push({\n          type: 'alert',\n          severity: 'high',\n          title: 'High Cholesterol Level',\n          description: `Total cholesterol of ${healthData.cholesterolTotal} mg/dL is above recommended levels (< 200 mg/dL).`,\n          recommendations: 'Consult your doctor about cholesterol management. Consider dietary changes and regular exercise.',\n        });\n      } else if (healthData.cholesterolTotal > 200) {\n        insights.push({\n          type: 'recommendation',\n          severity: 'medium',\n          title: 'Borderline High Cholesterol',\n          description: `Total cholesterol of ${healthData.cholesterolTotal} mg/dL is borderline high.`,\n          recommendations: 'Focus on heart-healthy diet with reduced saturated fats. Increase fiber intake.',\n        });\n      }\n    }\n\n    // Save insights to database\n    for (const insight of insights) {\n      await db.insert(healthInsights).values({\n        patientId,\n        recordId,\n        insightType: insight.type,\n        severity: insight.severity,\n        title: insight.title,\n        description: insight.description,\n        recommendations: insight.recommendations,\n      });\n    }\n\n    return insights;\n  }\n\n  /**\n   * Generate general health recommendations\n   */\n  static async generateGeneralRecommendations(patientId: string) {\n    const generalInsights = [\n      {\n        type: 'recommendation',\n        severity: 'low',\n        title: 'Regular Health Checkups',\n        description: 'Annual health screenings are important for early detection of potential health issues.',\n        recommendations: 'Schedule yearly checkups with your primary care physician. Keep track of your vaccination schedule.',\n      },\n      {\n        type: 'recommendation',\n        severity: 'low',\n        title: 'Maintain Healthy Lifestyle',\n        description: 'A balanced diet and regular exercise are key to long-term health.',\n        recommendations: 'Aim for 150 minutes of moderate exercise per week. Eat a variety of fruits, vegetables, and whole grains.',\n      },\n    ];\n\n    for (const insight of generalInsights) {\n      await db.insert(healthInsights).values({\n        patientId,\n        insightType: insight.type,\n        severity: insight.severity,\n        title: insight.title,\n        description: insight.description,\n        recommendations: insight.recommendations,\n      });\n    }\n\n    return generalInsights;\n  }\n}\n","size_bytes":6841},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, integer, boolean, jsonb } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table with role-based access\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  email: text(\"email\").notNull().unique(),\n  fullName: text(\"full_name\").notNull(),\n  role: text(\"role\").notNull(), // patient, doctor, pharmacy, insurance\n  phone: text(\"phone\"),\n  specialization: text(\"specialization\"), // for doctors\n  licenseNumber: text(\"license_number\"), // for doctors/pharmacies\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Medical records uploaded by patients\nexport const medicalRecords = pgTable(\"medical_records\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  fileType: text(\"file_type\").notNull(), // pdf, image, etc\n  fileUrl: text(\"file_url\").notNull(),\n  fileSize: integer(\"file_size\").notNull(),\n  recordType: text(\"record_type\").notNull(), // lab_report, prescription, imaging, etc\n  uploadedAt: timestamp(\"uploaded_at\").defaultNow().notNull(),\n});\n\n// Access permissions for medical records\nexport const accessPermissions = pgTable(\"access_permissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  recordId: varchar(\"record_id\").notNull().references(() => medicalRecords.id),\n  grantedToId: varchar(\"granted_to_id\").notNull().references(() => users.id),\n  grantedById: varchar(\"granted_by_id\").notNull().references(() => users.id),\n  accessLevel: text(\"access_level\").notNull(), // view, download\n  grantedAt: timestamp(\"granted_at\").defaultNow().notNull(),\n  revokedAt: timestamp(\"revoked_at\"),\n  isActive: boolean(\"is_active\").default(true).notNull(),\n});\n\n// E-prescriptions created by doctors\nexport const prescriptions = pgTable(\"prescriptions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  doctorId: varchar(\"doctor_id\").notNull().references(() => users.id),\n  diagnosis: text(\"diagnosis\").notNull(),\n  notes: text(\"notes\"),\n  status: text(\"status\").notNull().default('pending'), // pending, verified, dispensed\n  dispensedById: varchar(\"dispensed_by_id\").references(() => users.id),\n  dispensedAt: timestamp(\"dispensed_at\"),\n  blockchainHash: text(\"blockchain_hash\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Individual medications in a prescription\nexport const prescriptionItems = pgTable(\"prescription_items\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  prescriptionId: varchar(\"prescription_id\").notNull().references(() => prescriptions.id),\n  medicationName: text(\"medication_name\").notNull(),\n  dosage: text(\"dosage\").notNull(),\n  frequency: text(\"frequency\").notNull(),\n  duration: text(\"duration\").notNull(),\n  instructions: text(\"instructions\"),\n});\n\n// Insurance claims\nexport const insuranceClaims = pgTable(\"insurance_claims\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  agentId: varchar(\"agent_id\").references(() => users.id),\n  policyNumber: text(\"policy_number\").notNull(),\n  policyProvider: text(\"policy_provider\").notNull(),\n  claimAmount: integer(\"claim_amount\").notNull(),\n  claimType: text(\"claim_type\").notNull(), // hospitalization, outpatient, pharmacy\n  description: text(\"description\").notNull(),\n  status: text(\"status\").notNull().default('submitted'), // submitted, under_review, approved, rejected, paid\n  supportingDocuments: jsonb(\"supporting_documents\").$type<string[]>().default([]),\n  reviewNotes: text(\"review_notes\"),\n  blockchainHash: text(\"blockchain_hash\").notNull(),\n  submittedAt: timestamp(\"submitted_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Blockchain transaction log (immutable)\nexport const blockchainTransactions = pgTable(\"blockchain_transactions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  transactionHash: text(\"transaction_hash\").notNull().unique(),\n  actorId: varchar(\"actor_id\").notNull().references(() => users.id),\n  actionType: text(\"action_type\").notNull(), // grant_access, revoke_access, create_prescription, verify_prescription, submit_claim\n  resourceType: text(\"resource_type\").notNull(), // medical_record, prescription, claim\n  resourceId: varchar(\"resource_id\").notNull(),\n  metadata: jsonb(\"metadata\").$type<Record<string, any>>().default({}),\n  previousHash: text(\"previous_hash\"),\n  timestamp: timestamp(\"timestamp\").defaultNow().notNull(),\n});\n\n// Health insights from AI analysis\nexport const healthInsights = pgTable(\"health_insights\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  patientId: varchar(\"patient_id\").notNull().references(() => users.id),\n  recordId: varchar(\"record_id\").references(() => medicalRecords.id),\n  insightType: text(\"insight_type\").notNull(), // alert, recommendation, trend\n  severity: text(\"severity\").notNull(), // low, medium, high, critical\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  recommendations: text(\"recommendations\"),\n  isRead: boolean(\"is_read\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  medicalRecords: many(medicalRecords),\n  prescriptionsAsPatient: many(prescriptions, { relationName: \"patientPrescriptions\" }),\n  prescriptionsAsDoctor: many(prescriptions, { relationName: \"doctorPrescriptions\" }),\n  claims: many(insuranceClaims),\n  blockchainTransactions: many(blockchainTransactions),\n  healthInsights: many(healthInsights),\n}));\n\nexport const medicalRecordsRelations = relations(medicalRecords, ({ one, many }) => ({\n  patient: one(users, {\n    fields: [medicalRecords.patientId],\n    references: [users.id],\n  }),\n  accessPermissions: many(accessPermissions),\n}));\n\nexport const prescriptionsRelations = relations(prescriptions, ({ one, many }) => ({\n  patient: one(users, {\n    fields: [prescriptions.patientId],\n    references: [users.id],\n    relationName: \"patientPrescriptions\",\n  }),\n  doctor: one(users, {\n    fields: [prescriptions.doctorId],\n    references: [users.id],\n    relationName: \"doctorPrescriptions\",\n  }),\n  items: many(prescriptionItems),\n}));\n\nexport const prescriptionItemsRelations = relations(prescriptionItems, ({ one }) => ({\n  prescription: one(prescriptions, {\n    fields: [prescriptionItems.prescriptionId],\n    references: [prescriptions.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertMedicalRecordSchema = createInsertSchema(medicalRecords).omit({\n  id: true,\n  uploadedAt: true,\n});\n\nexport const insertAccessPermissionSchema = createInsertSchema(accessPermissions).omit({\n  id: true,\n  grantedAt: true,\n});\n\nexport const insertPrescriptionSchema = createInsertSchema(prescriptions).omit({\n  id: true,\n  createdAt: true,\n  dispensedAt: true,\n  dispensedById: true,\n});\n\nexport const insertPrescriptionItemSchema = createInsertSchema(prescriptionItems).omit({\n  id: true,\n});\n\nexport const insertInsuranceClaimSchema = createInsertSchema(insuranceClaims).omit({\n  id: true,\n  submittedAt: true,\n  updatedAt: true,\n  agentId: true,\n});\n\nexport const insertBlockchainTransactionSchema = createInsertSchema(blockchainTransactions).omit({\n  id: true,\n  timestamp: true,\n});\n\nexport const insertHealthInsightSchema = createInsertSchema(healthInsights).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\n\nexport type MedicalRecord = typeof medicalRecords.$inferSelect;\nexport type InsertMedicalRecord = z.infer<typeof insertMedicalRecordSchema>;\n\nexport type AccessPermission = typeof accessPermissions.$inferSelect;\nexport type InsertAccessPermission = z.infer<typeof insertAccessPermissionSchema>;\n\nexport type Prescription = typeof prescriptions.$inferSelect;\nexport type InsertPrescription = z.infer<typeof insertPrescriptionSchema>;\n\nexport type PrescriptionItem = typeof prescriptionItems.$inferSelect;\nexport type InsertPrescriptionItem = z.infer<typeof insertPrescriptionItemSchema>;\n\nexport type InsuranceClaim = typeof insuranceClaims.$inferSelect;\nexport type InsertInsuranceClaim = z.infer<typeof insertInsuranceClaimSchema>;\n\nexport type BlockchainTransaction = typeof blockchainTransactions.$inferSelect;\nexport type InsertBlockchainTransaction = z.infer<typeof insertBlockchainTransactionSchema>;\n\nexport type HealthInsight = typeof healthInsights.$inferSelect;\nexport type InsertHealthInsight = z.infer<typeof insertHealthInsightSchema>;\n","size_bytes":9193},"client/src/pages/doctor-dashboard.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { FileText, Users, CheckCircle, TrendingUp } from 'lucide-react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { useAuth } from '@/lib/auth-context';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Button } from '@/components/ui/button';\nimport { useLocation } from 'wouter';\n\nexport default function DoctorDashboard() {\n  const { user } = useAuth();\n  const [, setLocation] = useLocation();\n\n  const { data: stats, isLoading } = useQuery({\n    queryKey: ['/api/doctor/stats'],\n  });\n\n  if (isLoading) {\n    return (\n      <DashboardLayout role=\"doctor\">\n        <div className=\"space-y-6\">\n          <div>\n            <Skeleton className=\"h-8 w-64\" />\n            <Skeleton className=\"mt-2 h-4 w-96\" />\n          </div>\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n            {[...Array(4)].map((_, i) => (\n              <Skeleton key={i} className=\"h-32\" />\n            ))}\n          </div>\n        </div>\n      </DashboardLayout>\n    );\n  }\n\n  const statsData = stats || {\n    totalPrescriptions: 0,\n    pendingPrescriptions: 0,\n    dispensedPrescriptions: 0,\n    totalPatients: 0,\n  };\n\n  return (\n    <DashboardLayout role=\"doctor\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">\n            Dr. {user?.fullName}\n            {user?.specialization && (\n              <span className=\"ml-2 text-xl font-normal text-muted-foreground\">\n                • {user.specialization}\n              </span>\n            )}\n          </h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            Create and manage blockchain-verified e-prescriptions\n          </p>\n        </div>\n\n        <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Total Prescriptions</CardTitle>\n              <FileText className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-total-prescriptions\">\n                {statsData.totalPrescriptions}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">All time</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Pending</CardTitle>\n              <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-pending\">\n                {statsData.pendingPrescriptions}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Awaiting pharmacy</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Dispensed</CardTitle>\n              <CheckCircle className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-dispensed\">\n                {statsData.dispensedPrescriptions}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Completed</p>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n              <CardTitle className=\"text-sm font-medium\">Patients</CardTitle>\n              <Users className=\"h-4 w-4 text-muted-foreground\" />\n            </CardHeader>\n            <CardContent>\n              <div className=\"text-2xl font-bold\" data-testid=\"stat-patients\">\n                {statsData.totalPatients}\n              </div>\n              <p className=\"text-xs text-muted-foreground\">Under care</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"font-serif\">Quick Actions</CardTitle>\n            <CardDescription>Common prescription management tasks</CardDescription>\n          </CardHeader>\n          <CardContent className=\"space-y-3\">\n            <button\n              className=\"flex w-full items-center gap-3 rounded-md border p-4 text-left transition-colors hover-elevate active-elevate-2\"\n              onClick={() => setLocation('/dashboard/doctor/prescribe')}\n              data-testid=\"button-create-prescription\"\n            >\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-chart-2/10\">\n                <FileText className=\"h-5 w-5 text-chart-2\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium\">Create New Prescription</p>\n                <p className=\"text-sm text-muted-foreground\">\n                  Write and verify e-prescription on blockchain\n                </p>\n              </div>\n            </button>\n\n            <button\n              className=\"flex w-full items-center gap-3 rounded-md border p-4 text-left transition-colors hover-elevate active-elevate-2\"\n              onClick={() => setLocation('/dashboard/doctor/prescriptions')}\n              data-testid=\"button-view-prescriptions\"\n            >\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-primary/10\">\n                <CheckCircle className=\"h-5 w-5 text-primary\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium\">View My Prescriptions</p>\n                <p className=\"text-sm text-muted-foreground\">See all issued prescriptions</p>\n              </div>\n            </button>\n\n            <button\n              className=\"flex w-full items-center gap-3 rounded-md border p-4 text-left transition-colors hover-elevate active-elevate-2\"\n              onClick={() => setLocation('/dashboard/doctor/patients')}\n              data-testid=\"button-view-patients\"\n            >\n              <div className=\"flex h-10 w-10 items-center justify-center rounded-md bg-chart-4/10\">\n                <Users className=\"h-5 w-5 text-chart-4\" />\n              </div>\n              <div className=\"flex-1\">\n                <p className=\"font-medium\">Patient Records</p>\n                <p className=\"text-sm text-muted-foreground\">Access patient information</p>\n              </div>\n            </button>\n          </CardContent>\n        </Card>\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":6861},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem('token');\n  const headers: Record<string, string> = {\n    ...(data ? { \"Content-Type\": \"application/json\" } : {}),\n    ...(token ? { \"Authorization\": `Bearer ${token}` } : {}),\n  };\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem('token');\n    const headers: Record<string, string> = token ? { \"Authorization\": `Bearer ${token}` } : {};\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n      headers,\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1720},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/pages/landing.tsx":{"content":"import { Link } from 'wouter';\nimport { Shield, Lock, FileText, Activity, ChevronRight } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { ThemeToggle } from '@/components/theme-toggle';\nimport heroImage from '@assets/generated_images/Medical_professional_reviewing_blockchain_health_data_bf16f2e8.png';\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"sticky top-0 z-50 border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto flex h-16 items-center justify-between px-4 md:px-8\">\n          <div className=\"flex items-center gap-2\">\n            <Shield className=\"h-8 w-8 text-primary\" />\n            <span className=\"font-serif text-xl font-bold\">MediGuard</span>\n          </div>\n          <div className=\"flex items-center gap-2\">\n            <ThemeToggle />\n            <Link href=\"/login\">\n              <Button variant=\"ghost\" data-testid=\"link-login\">Login</Button>\n            </Link>\n            <Link href=\"/register\">\n              <Button data-testid=\"link-register\">Get Started</Button>\n            </Link>\n          </div>\n        </div>\n      </header>\n\n      {/* Hero Section */}\n      <section className=\"relative h-[600px] overflow-hidden\">\n        <div \n          className=\"absolute inset-0 bg-cover bg-center\"\n          style={{ backgroundImage: `url(${heroImage})` }}\n        />\n        <div className=\"absolute inset-0 bg-gradient-to-r from-black/70 via-black/50 to-black/30\" />\n        <div className=\"relative container mx-auto flex h-full items-center px-4 md:px-8\">\n          <div className=\"max-w-2xl text-white\">\n            <h1 className=\"font-serif text-5xl font-bold leading-tight md:text-6xl\">\n              Secure Healthcare Data on the Blockchain\n            </h1>\n            <p className=\"mt-6 text-lg text-white/90\">\n              Take control of your medical records with blockchain-verified security. \n              Share data securely, manage prescriptions, and track insurance claims transparently.\n            </p>\n            <div className=\"mt-8 flex flex-wrap gap-4\">\n              <Link href=\"/register\">\n                <Button size=\"lg\" variant=\"default\" className=\"bg-primary text-primary-foreground backdrop-blur\" data-testid=\"button-hero-register\">\n                  Start Free Trial\n                  <ChevronRight className=\"ml-2 h-5 w-5\" />\n                </Button>\n              </Link>\n              <Button size=\"lg\" variant=\"outline\" className=\"border-white/30 bg-white/10 text-white backdrop-blur hover:bg-white/20\" data-testid=\"button-hero-learn\">\n                Learn More\n              </Button>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Features Section */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4 md:px-8\">\n          <div className=\"mb-12 text-center\">\n            <h2 className=\"font-serif text-3xl font-bold md:text-4xl\">\n              Healthcare Data Management Reimagined\n            </h2>\n            <p className=\"mt-4 text-lg text-muted-foreground\">\n              Built for patients, doctors, pharmacies, and insurance providers\n            </p>\n          </div>\n\n          <div className=\"grid gap-6 md:grid-cols-2 lg:grid-cols-4\">\n            <Card className=\"p-6\">\n              <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-md bg-primary/10\">\n                <Lock className=\"h-6 w-6 text-primary\" />\n              </div>\n              <h3 className=\"mb-2 font-serif text-xl font-semibold\">Patient Control</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Upload and manage your medical records. Grant or revoke access to healthcare providers with blockchain-verified consent.\n              </p>\n            </Card>\n\n            <Card className=\"p-6\">\n              <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-md bg-chart-2/10\">\n                <FileText className=\"h-6 w-6 text-chart-2\" />\n              </div>\n              <h3 className=\"mb-2 font-serif text-xl font-semibold\">E-Prescriptions</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Doctors create verified digital prescriptions. Pharmacies instantly verify authenticity through blockchain verification.\n              </p>\n            </Card>\n\n            <Card className=\"p-6\">\n              <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-md bg-chart-5/10\">\n                <Shield className=\"h-6 w-6 text-chart-5\" />\n              </div>\n              <h3 className=\"mb-2 font-serif text-xl font-semibold\">Claim Transparency</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                Track insurance claims from submission to payment. Every status update is recorded on the blockchain.\n              </p>\n            </Card>\n\n            <Card className=\"p-6\">\n              <div className=\"mb-4 flex h-12 w-12 items-center justify-center rounded-md bg-chart-4/10\">\n                <Activity className=\"h-6 w-6 text-chart-4\" />\n              </div>\n              <h3 className=\"mb-2 font-serif text-xl font-semibold\">Health Insights</h3>\n              <p className=\"text-sm text-muted-foreground\">\n                AI-powered analysis of your medical data provides personalized health alerts and recommendations.\n              </p>\n            </Card>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"border-t bg-muted/30 py-20\">\n        <div className=\"container mx-auto px-4 text-center md:px-8\">\n          <h2 className=\"font-serif text-3xl font-bold md:text-4xl\">\n            Ready to Secure Your Health Data?\n          </h2>\n          <p className=\"mt-4 text-lg text-muted-foreground\">\n            Join thousands of patients and healthcare providers using MediGuard\n          </p>\n          <div className=\"mt-8\">\n            <Link href=\"/register\">\n              <Button size=\"lg\" data-testid=\"button-cta-register\">\n                Create Your Account\n                <ChevronRight className=\"ml-2 h-5 w-5\" />\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* Footer */}\n      <footer className=\"border-t py-8\">\n        <div className=\"container mx-auto px-4 text-center text-sm text-muted-foreground md:px-8\">\n          <p>&copy; 2025 MediGuard. Blockchain-based healthcare data management.</p>\n        </div>\n      </footer>\n    </div>\n  );\n}\n","size_bytes":6681},"client/src/pages/doctor-prescriptions.tsx":{"content":"import { useQuery } from '@tanstack/react-query';\nimport { FileText, CheckCircle, Clock, Pill } from 'lucide-react';\nimport { DashboardLayout } from '@/components/dashboard-layout';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { Badge } from '@/components/ui/badge';\nimport { format } from 'date-fns';\n\nexport default function DoctorPrescriptions() {\n  const { data: prescriptions, isLoading } = useQuery({\n    queryKey: ['/api/prescriptions'],\n  });\n\n  return (\n    <DashboardLayout role=\"doctor\">\n      <div className=\"space-y-6\">\n        <div>\n          <h1 className=\"font-serif text-3xl font-bold\">My Prescriptions</h1>\n          <p className=\"mt-2 text-muted-foreground\">\n            View all e-prescriptions you've created\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {[...Array(4)].map((_, i) => (\n              <Skeleton key={i} className=\"h-48\" />\n            ))}\n          </div>\n        ) : prescriptions && prescriptions.length > 0 ? (\n          <div className=\"grid gap-4 md:grid-cols-2\">\n            {prescriptions.map((prescription: any) => (\n              <Card key={prescription.id} data-testid={`prescription-${prescription.id}`}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div>\n                      <CardTitle className=\"text-base\">#{prescription.id.slice(0, 8)}</CardTitle>\n                      <CardDescription>{prescription.diagnosis}</CardDescription>\n                    </div>\n                    <Badge variant={prescription.status === 'dispensed' ? 'default' : 'secondary'} className=\"capitalize\">\n                      {prescription.status === 'dispensed' ? (\n                        <><CheckCircle className=\"mr-1 h-3 w-3\" />Dispensed</>\n                      ) : (\n                        <><Clock className=\"mr-1 h-3 w-3\" />Pending</>\n                      )}\n                    </Badge>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-3\">\n                  <div>\n                    <p className=\"text-sm text-muted-foreground\">Patient ID</p>\n                    <code className=\"text-sm font-mono\">{prescription.patientId.slice(0, 12)}...</code>\n                  </div>\n\n                  {prescription.notes && (\n                    <div>\n                      <p className=\"text-sm text-muted-foreground\">Notes</p>\n                      <p className=\"text-sm\">{prescription.notes}</p>\n                    </div>\n                  )}\n\n                  <div className=\"pt-2\">\n                    <p className=\"text-xs text-muted-foreground\">Blockchain Hash:</p>\n                    <code className=\"text-xs font-mono\">{prescription.blockchainHash.slice(0, 20)}...</code>\n                  </div>\n\n                  <div className=\"text-xs text-muted-foreground\">\n                    Created {format(new Date(prescription.createdAt), 'MMM d, yyyy')}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <Card>\n            <CardContent className=\"flex flex-col items-center justify-center py-16\">\n              <FileText className=\"h-16 w-16 text-muted-foreground/50\" />\n              <h3 className=\"mt-4 font-serif text-xl font-semibold\">No prescriptions yet</h3>\n              <p className=\"mt-2 text-sm text-muted-foreground\">\n                Create your first e-prescription to get started\n              </p>\n            </CardContent>\n          </Card>\n        )}\n      </div>\n    </DashboardLayout>\n  );\n}\n","size_bytes":3750},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"server/db.ts":{"content":"// Referenced from javascript_database blueprint\nimport { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":532},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 210 20% 98%;\n\n  --foreground: 220 15% 15%;\n\n  --border: 210 15% 88%;\n\n  --card: 0 0% 100%;\n\n  --card-foreground: 220 15% 15%;\n\n  --card-border: 210 12% 92%;\n\n  --sidebar: 210 18% 96%;\n\n  --sidebar-foreground: 220 15% 15%;\n\n  --sidebar-border: 210 15% 90%;\n\n  --sidebar-primary: 210 85% 45%;\n\n  --sidebar-primary-foreground: 210 15% 98%;\n\n  --sidebar-accent: 210 20% 92%;\n\n  --sidebar-accent-foreground: 220 15% 20%;\n\n  --sidebar-ring: 210 85% 45%;\n\n  --popover: 0 0% 100%;\n\n  --popover-foreground: 220 15% 15%;\n\n  --popover-border: 210 12% 92%;\n\n  --primary: 210 85% 45%;\n\n  --primary-foreground: 210 15% 98%;\n\n  --secondary: 210 15% 94%;\n\n  --secondary-foreground: 220 15% 20%;\n\n  --muted: 210 18% 96%;\n\n  --muted-foreground: 220 10% 45%;\n\n  --accent: 210 20% 94%;\n\n  --accent-foreground: 220 15% 20%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 210 20% 75%;\n  --ring: 210 85% 45%;\n  --chart-1: 210 85% 45%;\n  --chart-2: 145 65% 45%;\n  --chart-3: 270 60% 55%;\n  --chart-4: 25 75% 55%;\n  --chart-5: 180 55% 50%;\n\n  --font-sans: Inter, sans-serif;\n  --font-serif: Manrope, serif;\n  --font-mono: \"JetBrains Mono\", monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(210 20% 15% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(210 20% 15% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(210 20% 15% / 0.06), 0px 1px 2px -1px hsl(210 20% 15% / 0.08);\n  --shadow: 0px 4px 6px -1px hsl(210 20% 15% / 0.08), 0px 2px 4px -2px hsl(210 20% 15% / 0.06);\n  --shadow-md: 0px 6px 12px -2px hsl(210 20% 15% / 0.10), 0px 3px 6px -3px hsl(210 20% 15% / 0.08);\n  --shadow-lg: 0px 10px 20px -4px hsl(210 20% 15% / 0.12), 0px 4px 8px -4px hsl(210 20% 15% / 0.08);\n  --shadow-xl: 0px 20px 30px -6px hsl(210 20% 15% / 0.15), 0px 8px 12px -6px hsl(210 20% 15% / 0.10);\n  --shadow-2xl: 0px 30px 50px -8px hsl(210 20% 15% / 0.20);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 220 25% 8%;\n\n  --foreground: 210 10% 95%;\n\n  --border: 220 15% 18%;\n\n  --card: 220 20% 12%;\n\n  --card-foreground: 210 10% 95%;\n\n  --card-border: 220 15% 16%;\n\n  --sidebar: 220 22% 10%;\n\n  --sidebar-foreground: 210 10% 95%;\n\n  --sidebar-border: 220 18% 14%;\n\n  --sidebar-primary: 210 85% 45%;\n\n  --sidebar-primary-foreground: 210 15% 98%;\n\n  --sidebar-accent: 220 20% 16%;\n\n  --sidebar-accent-foreground: 210 10% 95%;\n\n  --sidebar-ring: 210 85% 45%;\n\n  --popover: 220 20% 12%;\n\n  --popover-foreground: 210 10% 95%;\n\n  --popover-border: 220 15% 16%;\n\n  --primary: 210 85% 45%;\n\n  --primary-foreground: 210 15% 98%;\n\n  --secondary: 220 18% 18%;\n\n  --secondary-foreground: 210 10% 95%;\n\n  --muted: 220 20% 14%;\n\n  --muted-foreground: 210 8% 70%;\n\n  --accent: 220 18% 16%;\n\n  --accent-foreground: 210 10% 95%;\n\n  --destructive: 0 70% 50%;\n\n  --destructive-foreground: 0 10% 98%;\n\n  --input: 220 20% 28%;\n  --ring: 210 85% 45%;\n  --chart-1: 210 85% 65%;\n  --chart-2: 145 65% 60%;\n  --chart-3: 270 60% 70%;\n  --chart-4: 25 75% 65%;\n  --chart-5: 180 55% 65%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(220 30% 5% / 0.40);\n  --shadow-xs: 0px 1px 3px 0px hsl(220 30% 5% / 0.50);\n  --shadow-sm: 0px 2px 4px 0px hsl(220 30% 5% / 0.40), 0px 1px 2px -1px hsl(220 30% 5% / 0.50);\n  --shadow: 0px 4px 6px -1px hsl(220 30% 5% / 0.50), 0px 2px 4px -2px hsl(220 30% 5% / 0.40);\n  --shadow-md: 0px 6px 12px -2px hsl(220 30% 5% / 0.60), 0px 3px 6px -3px hsl(220 30% 5% / 0.50);\n  --shadow-lg: 0px 10px 20px -4px hsl(220 30% 5% / 0.70), 0px 4px 8px -4px hsl(220 30% 5% / 0.50);\n  --shadow-xl: 0px 20px 30px -6px hsl(220 30% 5% / 0.80), 0px 8px 12px -6px hsl(220 30% 5% / 0.60);\n  --shadow-2xl: 0px 30px 50px -8px hsl(220 30% 5% / 0.90);\n\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":9885},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"replit.md":{"content":"# MediGuard - Blockchain-Based Healthcare Data Management System\n\n## Overview\nMediGuard is a comprehensive healthcare data management platform that leverages blockchain technology for secure, transparent, and patient-controlled medical data sharing. The system serves four user roles: Patients, Doctors, Pharmacies, and Insurance Agents.\n\n## Current State\n**Phase**: MVP Complete - Ready for Testing\n**Last Updated**: January 2025\n**Status**: All core features implemented and integrated\n\n## Project Architecture\n\n### Tech Stack\n- **Frontend**: React.js + TypeScript + Wouter (routing)\n- **UI Framework**: Shadcn UI + TailwindCSS\n- **Backend**: Node.js + Express.js\n- **Database**: PostgreSQL (Neon) with Drizzle ORM\n- **State Management**: TanStack Query (React Query v5)\n- **Authentication**: JWT-based with role management\n- **Blockchain**: Simulated blockchain with cryptographic hashing\n\n### Design System\n- **Primary Color**: Medical Blue (210 85% 45%)\n- **Fonts**: \n  - Sans: Inter (body text)\n  - Serif: Manrope (headings)\n  - Mono: JetBrains Mono (blockchain hashes)\n- **Theme**: Light/Dark mode support\n- **Color Coding**:\n  - Patient: Blue (#2563eb)\n  - Doctor: Green (#22c55e)\n  - Pharmacy: Teal (#06b6d4)\n  - Insurance: Orange (#f97316)\n\n## Features\n\n### User Roles & Capabilities\n\n#### 1. Patient\n- Upload medical records (lab reports, imaging, prescriptions)\n- Grant/revoke access to healthcare providers\n- View blockchain transaction history\n- Receive AI-powered health insights\n- Track all data access events\n\n#### 2. Doctor\n- Create blockchain-verified e-prescriptions\n- View patient medical records (with permission)\n- Manage prescription history\n- Digital signature on prescriptions\n\n#### 3. Pharmacy\n- Verify prescription authenticity via blockchain\n- Scan QR codes or enter prescription IDs\n- Mark prescriptions as dispensed\n- View dispensing history\n\n#### 4. Insurance Agent\n- Browse health insurance plans (PolicyBazaar integration)\n- Submit insurance claims\n- Track claim status (submitted → under review → approved/rejected → paid)\n- View blockchain-verified claim history\n\n### Database Schema\n\n#### Core Tables\n1. **users** - User accounts with role-based access\n   - Roles: patient, doctor, pharmacy, insurance\n   - Includes specialization (doctors), license numbers (doctors/pharmacies)\n\n2. **medical_records** - Patient-uploaded health documents\n   - File metadata, type, upload timestamp\n   - Linked to patient accounts\n\n3. **access_permissions** - Granular access control\n   - Tracks who can access which records\n   - Grant/revoke capability with timestamps\n   - Blockchain-logged consent management\n\n4. **prescriptions** - Doctor-created e-prescriptions\n   - Diagnosis, notes, blockchain hash\n   - Status tracking (pending → verified → dispensed)\n\n5. **prescription_items** - Medication details\n   - Medication name, dosage, frequency, duration\n   - Instructions for use\n\n6. **insurance_claims** - Claim submissions and tracking\n   - Policy details, claim amount, type\n   - Status workflow with blockchain verification\n   - Supporting documents (JSON array)\n\n7. **blockchain_transactions** - Immutable audit log\n   - Transaction hash (SHA-256)\n   - Actor, action type, resource references\n   - Previous hash for blockchain chain integrity\n\n8. **health_insights** - AI-generated health alerts\n   - Insight type, severity levels\n   - Recommendations based on uploaded data\n\n## Project Structure\n\n```\n/\n├── client/\n│   ├── src/\n│   │   ├── components/\n│   │   │   ├── ui/ (Shadcn components)\n│   │   │   ├── dashboard-layout.tsx (Role-based sidebar)\n│   │   │   ├── theme-provider.tsx\n│   │   │   └── theme-toggle.tsx\n│   │   ├── lib/\n│   │   │   ├── auth-context.tsx (Auth state management)\n│   │   │   └── queryClient.ts\n│   │   ├── pages/\n│   │   │   ├── landing.tsx (Marketing page)\n│   │   │   ├── login.tsx\n│   │   │   ├── register.tsx (Role selection)\n│   │   │   ├── patient-dashboard.tsx\n│   │   │   ├── doctor-dashboard.tsx\n│   │   │   ├── pharmacy-dashboard.tsx\n│   │   │   └── insurance-dashboard.tsx\n│   │   ├── App.tsx (Routing + Protected routes)\n│   │   └── index.css (Design tokens)\n│   └── index.html\n├── server/\n│   ├── routes.ts (API endpoints - TO BE IMPLEMENTED)\n│   ├── storage.ts (Database interface - TO BE IMPLEMENTED)\n│   └── db.ts (TO BE CREATED - PostgreSQL connection)\n├── shared/\n│   └── schema.ts (Drizzle schema + Zod types)\n├── design_guidelines.md (Visual design system)\n└── replit.md (This file)\n```\n\n## API Endpoints (To Be Implemented)\n\n### Authentication\n- `POST /api/auth/register` - Create new user account\n- `POST /api/auth/login` - Login with JWT token\n\n### Patient APIs\n- `GET /api/patient/stats` - Dashboard statistics\n- `POST /api/medical-records` - Upload medical record\n- `GET /api/medical-records` - List patient's records\n- `POST /api/access-permissions` - Grant access\n- `DELETE /api/access-permissions/:id` - Revoke access\n- `GET /api/health-insights` - Get AI insights\n\n### Doctor APIs\n- `GET /api/doctor/stats` - Dashboard statistics\n- `POST /api/prescriptions` - Create prescription\n- `GET /api/prescriptions` - List doctor's prescriptions\n- `GET /api/patients` - List patients (with access)\n\n### Pharmacy APIs\n- `GET /api/pharmacy/stats` - Dashboard statistics\n- `GET /api/prescriptions/:id/verify` - Verify prescription\n- `POST /api/prescriptions/:id/dispense` - Mark as dispensed\n\n### Insurance APIs\n- `GET /api/insurance/stats` - Dashboard statistics\n- `POST /api/claims` - Submit new claim\n- `GET /api/claims` - List user's claims\n- `PATCH /api/claims/:id` - Update claim status\n\n### Blockchain APIs\n- `GET /api/blockchain/transactions` - Get transaction history\n- `POST /api/blockchain/transaction` - Create new transaction\n\n## Blockchain Implementation\n\n### Simulated Blockchain Features\n1. **Cryptographic Hashing**: SHA-256 for transaction integrity\n2. **Chain Linking**: Each transaction references previous hash\n3. **Immutability**: Read-only transaction log\n4. **Transparency**: All actions auditable\n5. **Consent Tracking**: Access grants/revokes on blockchain\n\n### Transaction Types\n- `grant_access` - Patient grants record access\n- `revoke_access` - Patient revokes record access\n- `create_prescription` - Doctor creates prescription\n- `verify_prescription` - Pharmacy verifies prescription\n- `dispense_prescription` - Pharmacy dispenses medication\n- `submit_claim` - Insurance claim submission\n- `update_claim` - Claim status change\n\n## AI Health Insights\n\n### Rule-Based Analysis (MVP)\n- **High Blood Pressure Alert**: BP > 140/90\n- **High Blood Sugar Alert**: Glucose > 180 mg/dL\n- **Abnormal Lab Values**: Out-of-range results\n- **Medication Interaction Warnings**: Based on prescription history\n- **Preventive Care Reminders**: Checkup scheduling\n\n### Future Enhancement\n- TensorFlow.js integration\n- Predictive health models\n- Personalized recommendations\n\n## User Preferences\n- Clean, professional medical-grade UI\n- Blockchain transparency emphasized\n- Mobile-responsive design\n- Accessibility (WCAG AA compliance)\n\n## Recent Changes\n- 2025-01: Created complete database schema with 8 tables\n- 2025-01: Built authentication system with 4 user roles\n- 2025-01: Designed all dashboard UIs (Patient, Doctor, Pharmacy, Insurance)\n- 2025-01: Implemented theme toggle (light/dark mode)\n- 2025-01: Created landing page with hero image\n- 2025-01: Implemented all backend APIs (auth, medical records, prescriptions, pharmacy, insurance)\n- 2025-01: Created blockchain simulation service with SHA-256 hashing\n- 2025-01: Built health insights analyzer with rule-based alerts\n- 2025-01: Integrated frontend with backend using JWT authentication\n- 2025-01: Database tables created and migrations complete\n\n## Next Steps\n1. **Backend Implementation** (Task 2)\n   - Create PostgreSQL connection (server/db.ts)\n   - Implement all API endpoints in routes.ts\n   - Create DatabaseStorage class\n   - Build blockchain simulation service\n   - Implement file upload handling\n   - Create health insights analyzer\n\n2. **Integration** (Task 3)\n   - Connect frontend to backend APIs\n   - Implement data fetching with React Query\n   - Add loading states and error handling\n   - Test all user workflows\n   - Deploy and publish\n\n## Notes\n- PostgreSQL database is provisioned and ready\n- Environment variables configured (DATABASE_URL, etc.)\n- All frontend components use data-testid for e2e testing\n- Design follows medical-grade professional standards\n","size_bytes":8724}},"version":2}